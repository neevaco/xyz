{"mappings":"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","sources":["index.ts","http/http.ts","rxjsStub.ts","http/isomorphic-fetch.ts","auth/auth.ts","models/all.ts","models/AssetGate.ts","models/AutoSuggestion.ts","models/BlockchainInfo.ts","models/Collection.ts","models/CreditEvent.ts","models/CurrencyInfo.ts","models/ENS.ts","models/ErrorMessage.ts","models/ExchangeEvent.ts","models/Media.ts","models/MediaPreview.ts","models/MediaVersion.ts","models/NonFungibleToken.ts","models/OpenSeaContract.ts","models/OwnedCollection.ts","models/SearchDocument.ts","models/SocialMedia.ts","models/Token.ts","models/TokenAttribute.ts","models/TokenEvents.ts","models/Transaction.ts","models/TransactionLogLine.ts","models/URL.ts","models/Wallet.ts","configuration.ts","middleware.ts","servers.ts","apis/exception.ts","apis/baseapi.ts","types/PromiseAPI.ts","types/ObservableAPI.ts","apis/AlphaApi.ts","models/ObjectSerializer.ts","util.ts","apis/DefaultApi.ts"],"sourcesContent":["export * from \"./http/http\";\nexport * from \"./auth/auth\";\nexport * from \"./models/all\";\nexport { createConfiguration } from \"./configuration\"\n//export { Configuration } from \"./configuration\"\nexport * from \"./apis/exception\";\nexport * from \"./servers\";\nexport { RequiredError } from \"./apis/baseapi\";\n\n//export { PromiseMiddleware as Middleware } from './middleware';\nexport { PromiseAlphaApi as AlphaApi,  PromiseDefaultApi as DefaultApi } from './types/PromiseAPI';\n\n","import  URLParse from \"url-parse\";\nimport { Observable, from } from '../rxjsStub';\n\nexport * from './isomorphic-fetch';\n\n/**\n * Represents an HTTP method.\n */\nexport enum HttpMethod {\n    GET = \"GET\",\n    HEAD = \"HEAD\",\n    POST = \"POST\",\n    PUT = \"PUT\",\n    DELETE = \"DELETE\",\n    CONNECT = \"CONNECT\",\n    OPTIONS = \"OPTIONS\",\n    TRACE = \"TRACE\",\n    PATCH = \"PATCH\"\n}\n\n/**\n * Represents an HTTP file which will be transferred from or to a server.\n */\nexport type HttpFile = Blob & { readonly name: string };\n\n\nexport class HttpException extends Error {\n    public constructor(msg: string) {\n        super(msg);\n    }\n}\n\n/**\n * Represents the body of an outgoing HTTP request.\n */\nexport type RequestBody = undefined | string | FormData | URLSearchParams;\n\n/**\n * Represents an HTTP request context\n */\nexport class RequestContext {\n    private headers: { [key: string]: string } = {};\n    private body: RequestBody = undefined;\n    private url: URLParse;\n\n    /**\n     * Creates the request context using a http method and request resource url\n     *\n     * @param url url of the requested resource\n     * @param httpMethod http method\n     */\n    public constructor(url: string, private httpMethod: HttpMethod) {\n        this.url = new URLParse(url, true);\n    }\n\n    /*\n     * Returns the url set in the constructor including the query string\n     *\n     */\n    public getUrl(): string {\n        return this.url.toString();\n    }\n\n    /**\n     * Replaces the url set in the constructor with this url.\n     *\n     */\n    public setUrl(url: string) {\n        this.url = new URLParse(url, true);\n    }\n\n    /**\n     * Sets the body of the http request either as a string or FormData\n     *\n     * Note that setting a body on a HTTP GET, HEAD, DELETE, CONNECT or TRACE\n     * request is discouraged.\n     * https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.7.3.1\n     *\n     * @param body the body of the request\n     */\n    public setBody(body: RequestBody) {\n        this.body = body;\n    }\n\n    public getHttpMethod(): HttpMethod {\n        return this.httpMethod;\n    }\n\n    public getHeaders(): { [key: string]: string } {\n        return this.headers;\n    }\n\n    public getBody(): RequestBody {\n        return this.body;\n    }\n\n    public setQueryParam(name: string, value: string) {\n        let queryObj = this.url.query;\n        queryObj[name] = value;\n        this.url.set(\"query\", queryObj);\n    }\n\n    /**\n     * Sets a cookie with the name and value. NO check  for duplicate cookies is performed\n     *\n     */\n    public addCookie(name: string, value: string): void {\n        if (!this.headers[\"Cookie\"]) {\n            this.headers[\"Cookie\"] = \"\";\n        }\n        this.headers[\"Cookie\"] += name + \"=\" + value + \"; \";\n    }\n\n    public setHeaderParam(key: string, value: string): void  {\n        this.headers[key] = value;\n    }\n}\n\nexport interface ResponseBody {\n    text(): Promise<string>;\n    binary(): Promise<Blob>;\n}\n\n/**\n * Helper class to generate a `ResponseBody` from binary data\n */\nexport class SelfDecodingBody implements ResponseBody {\n    constructor(private dataSource: Promise<Blob>) {}\n\n    binary(): Promise<Blob> {\n        return this.dataSource;\n    }\n\n    async text(): Promise<string> {\n        const data: Blob = await this.dataSource;\n        // @ts-ignore\n        if (data.text) {\n            // @ts-ignore\n            return data.text();\n        }\n\n        return new Promise<string>((resolve, reject) => {\n            const reader = new FileReader();\n            reader.addEventListener(\"load\", () => resolve(reader.result as string));\n            reader.addEventListener(\"error\", () => reject(reader.error));\n            reader.readAsText(data);\n        });\n    }\n}\n\nexport class ResponseContext {\n    public constructor(\n        public httpStatusCode: number,\n        public headers: { [key: string]: string },\n        public body: ResponseBody\n    ) {}\n\n    /**\n     * Parse header value in the form `value; param1=\"value1\"`\n     *\n     * E.g. for Content-Type or Content-Disposition\n     * Parameter names are converted to lower case\n     * The first parameter is returned with the key `\"\"`\n     */\n    public getParsedHeader(headerName: string): { [parameter: string]: string } {\n        const result: { [parameter: string]: string } = {};\n        if (!this.headers[headerName]) {\n            return result;\n        }\n\n        const parameters = this.headers[headerName].split(\";\");\n        for (const parameter of parameters) {\n            let [key, value] = parameter.split(\"=\", 2);\n            key = key.toLowerCase().trim();\n            if (value === undefined) {\n                result[\"\"] = key;\n            } else {\n                value = value.trim();\n                if (value.startsWith('\"') && value.endsWith('\"')) {\n                    value = value.substring(1, value.length - 1);\n                }\n                result[key] = value;\n            }\n        }\n        return result;\n    }\n\n    public async getBodyAsFile(): Promise<HttpFile> {\n        const data = await this.body.binary();\n        const fileName = this.getParsedHeader(\"content-disposition\")[\"filename\"] || \"\";\n        const contentType = this.headers[\"content-type\"] || \"\";\n        try {\n            return new File([data], fileName, { type: contentType });\n        } catch (error) {\n            /** Fallback for when the File constructor is not available */\n            return Object.assign(data, {\n                name: fileName,\n                type: contentType\n            });\n        }\n    }\n\n    /**\n     * Use a heuristic to get a body of unknown data structure.\n     * Return as string if possible, otherwise as binary.\n     */\n    public getBodyAsAny(): Promise<string | Blob | undefined> {\n        try {\n            return this.body.text();\n        } catch {}\n\n        try {\n            return this.body.binary();\n        } catch {}\n\n        return Promise.resolve(undefined);\n    }\n}\n\nexport interface HttpLibrary {\n    send(request: RequestContext): Observable<ResponseContext>;\n}\n\nexport interface PromiseHttpLibrary {\n    send(request: RequestContext): Promise<ResponseContext>;\n}\n\nexport function wrapHttpLibrary(promiseHttpLibrary: PromiseHttpLibrary): HttpLibrary {\n  return {\n    send(request: RequestContext): Observable<ResponseContext> {\n      return from(promiseHttpLibrary.send(request));\n    }\n  }\n}\n","export class Observable<T> {\n  constructor(private promise: Promise<T>) {}\n\n  toPromise() {\n    return this.promise;\n  }\n\n  pipe<S>(callback: (value: T) => S | Promise<S>): Observable<S> {\n    return new Observable(this.promise.then(callback));\n  }\n}\n\nexport function from<T>(promise: Promise<any>) {\n  return new Observable(promise);\n}\n\nexport function of<T>(value: T) {\n  return new Observable<T>(Promise.resolve(value));\n}\n\nexport function mergeMap<T, S>(callback: (value: T) => Observable<S>) {\n  return (value: T) => callback(value).toPromise();\n}\n\nexport function map(callback: any) {\n  return callback;\n}\n","import {HttpLibrary, RequestContext, ResponseContext} from './http';\nimport { from, Observable } from '../rxjsStub';\nimport \"whatwg-fetch\";\n\nexport class IsomorphicFetchHttpLibrary implements HttpLibrary {\n\n    public send(request: RequestContext): Observable<ResponseContext> {\n        let method = request.getHttpMethod().toString();\n        let body = request.getBody();\n\n        const resultPromise = fetch(request.getUrl(), {\n            method: method,\n            body: body as any,\n            headers: request.getHeaders(),\n            credentials: \"same-origin\"\n        }).then((resp: any) => {\n            const headers: { [name: string]: string } = {};\n            resp.headers.forEach((value: string, name: string) => {\n              headers[name] = value;\n            });\n\n            const body = {\n              text: () => resp.text(),\n              binary: () => resp.blob()\n            };\n            return new ResponseContext(resp.status, headers, body);\n        });\n\n        return from<Promise<ResponseContext>>(resultPromise);\n\n    }\n}\n","import { RequestContext } from \"../http/http\";\n\n/**\n * Interface authentication schemes.\n */\nexport interface SecurityAuthentication {\n    /*\n     * @return returns the name of the security authentication as specified in OAI\n     */\n    getName(): string;\n\n    /**\n     * Applies the authentication scheme to the request context\n     *\n     * @params context the request context which should use this authentication scheme\n     */\n    applySecurityAuthentication(context: RequestContext): void | Promise<void>;\n}\n\nexport interface TokenProvider {\n  getToken(): Promise<string> | string;\n}\n\n/**\n * Applies apiKey authentication to the request context.\n */\nexport class ApikeyAuthentication implements SecurityAuthentication {\n    /**\n     * Configures this api key authentication with the necessary properties\n     *\n     * @param apiKey: The api key to be used for every request\n     */\n    public constructor(private apiKey: string) {}\n\n    public getName(): string {\n        return \"apikey\";\n    }\n\n    public applySecurityAuthentication(context: RequestContext) {\n        context.setQueryParam(\"apikey\", this.apiKey);\n    }\n}\n\n\nexport type AuthMethods = {\n    \"default\"?: SecurityAuthentication,\n    \"apikey\"?: SecurityAuthentication\n}\n\nexport type ApiKeyConfiguration = string;\nexport type HttpBasicConfiguration = { \"username\": string, \"password\": string };\nexport type HttpBearerConfiguration = { tokenProvider: TokenProvider };\nexport type OAuth2Configuration = { accessToken: string };\n\nexport type AuthMethodsConfiguration = {\n    \"default\"?: SecurityAuthentication,\n    \"apikey\"?: ApiKeyConfiguration\n}\n\n/**\n * Creates the authentication methods from a swagger description.\n *\n */\nexport function configureAuthMethods(config: AuthMethodsConfiguration | undefined): AuthMethods {\n    let authMethods: AuthMethods = {}\n\n    if (!config) {\n        return authMethods;\n    }\n    authMethods[\"default\"] = config[\"default\"]\n\n    if (config[\"apikey\"]) {\n        authMethods[\"apikey\"] = new ApikeyAuthentication(\n            config[\"apikey\"]\n        );\n    }\n\n    return authMethods;\n}","export * from './AssetGate'\nexport * from './AutoSuggestion'\nexport * from './BlockchainInfo'\nexport * from './Collection'\nexport * from './CreditEvent'\nexport * from './CurrencyInfo'\nexport * from './ENS'\nexport * from './ErrorMessage'\nexport * from './ExchangeEvent'\nexport * from './Media'\nexport * from './MediaPreview'\nexport * from './MediaVersion'\nexport * from './NonFungibleToken'\nexport * from './OpenSeaContract'\nexport * from './OwnedCollection'\nexport * from './SearchDocument'\nexport * from './SocialMedia'\nexport * from './Token'\nexport * from './TokenAttribute'\nexport * from './TokenEvents'\nexport * from './Transaction'\nexport * from './TransactionLogLine'\nexport * from './URL'\nexport * from './Wallet'\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class AssetGate {\n    /**\n    * True when the given wallet owns any token from a given contract.\n    */\n    'hasContract': boolean;\n    /**\n    * Only true when the given wallet owns a particular token from a given contract.\n    */\n    'hasToken': boolean;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"hasContract\",\n            \"baseName\": \"hasContract\",\n            \"type\": \"boolean\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"hasToken\",\n            \"baseName\": \"hasToken\",\n            \"type\": \"boolean\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return AssetGate.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class AutoSuggestion {\n    /**\n    * A URL-encoded string that can be used in conjunction with the search endpoint\n    */\n    'query'?: string;\n    /**\n    * The suggestion result's title fully spelled out\n    */\n    'title'?: string;\n    /**\n    * The type of result the suggestion is based on, e.g. Bored Ape Yacht Club would be a collection.\n    */\n    'type'?: AutoSuggestionTypeEnum;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"query\",\n            \"baseName\": \"query\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"title\",\n            \"baseName\": \"title\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"type\",\n            \"baseName\": \"type\",\n            \"type\": \"AutoSuggestionTypeEnum\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return AutoSuggestion.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type AutoSuggestionTypeEnum = \"query\" | \"collection\" | \"wallet\" | \"token\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class BlockchainInfo {\n    /**\n    * A CAIP-2 compliant chain ID. This ID is designed to provide a unique identifier for a given chain.\n    */\n    'chainID'?: string;\n    /**\n    * The name of a given chain. This is often a canonical name since a protocol may have multiple chains.\n    */\n    'name'?: string;\n    /**\n    * An ID used for a chain in a given ecosystem. This ID is not canonical and may collide with other chains. Do not use this value as a unique identifier.\n    */\n    'shortChainID'?: string;\n    /**\n    * The short-hand name for a given chain. Multiple chains (e.g. mainnet and a testnet) may have the same name.\n    */\n    'shortName'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"chainID\",\n            \"baseName\": \"chainID\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"name\",\n            \"baseName\": \"name\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"shortChainID\",\n            \"baseName\": \"shortChainID\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"shortName\",\n            \"baseName\": \"shortName\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return BlockchainInfo.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { BlockchainInfo } from './BlockchainInfo';\nimport { CurrencyInfo } from './CurrencyInfo';\nimport { Media } from './Media';\nimport { SocialMedia } from './SocialMedia';\nimport { URL } from './URL';\nimport { HttpFile } from '../http/http';\n\nexport class Collection {\n    'bannerImage'?: Media;\n    'blockchain': BlockchainInfo;\n    /**\n    * Address of the contract that minted this NFT.\n    */\n    'contractAddress': string;\n    /**\n    * Timestamp of creation of this contract in RFC 3339.\n    */\n    'createdDate'?: Date;\n    'description'?: string;\n    'featuredImage'?: Media;\n    'floorPrice'?: CurrencyInfo;\n    'name'?: string;\n    'shortDescription'?: string;\n    'slug'?: string;\n    'socialMedia'?: Array<SocialMedia>;\n    'symbol'?: string;\n    'urls'?: Array<URL>;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"bannerImage\",\n            \"baseName\": \"bannerImage\",\n            \"type\": \"Media\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"blockchain\",\n            \"baseName\": \"blockchain\",\n            \"type\": \"BlockchainInfo\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"contractAddress\",\n            \"baseName\": \"contractAddress\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"createdDate\",\n            \"baseName\": \"createdDate\",\n            \"type\": \"Date\",\n            \"format\": \"date-time\"\n        },\n        {\n            \"name\": \"description\",\n            \"baseName\": \"description\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"featuredImage\",\n            \"baseName\": \"featuredImage\",\n            \"type\": \"Media\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"floorPrice\",\n            \"baseName\": \"floorPrice\",\n            \"type\": \"CurrencyInfo\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"name\",\n            \"baseName\": \"name\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"shortDescription\",\n            \"baseName\": \"shortDescription\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"slug\",\n            \"baseName\": \"slug\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"socialMedia\",\n            \"baseName\": \"socialMedia\",\n            \"type\": \"Array<SocialMedia>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"symbol\",\n            \"baseName\": \"symbol\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"urls\",\n            \"baseName\": \"urls\",\n            \"type\": \"Array<URL>\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return Collection.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class CreditEvent {\n    /**\n    * Human-readable, machine parsable, event descriptions for credit-related contract events\n    */\n    'event'?: CreditEventEventEnum;\n    /**\n    * Brand or identifier closely associated with a contract\n    */\n    'protocol'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"event\",\n            \"baseName\": \"event\",\n            \"type\": \"CreditEventEventEnum\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"protocol\",\n            \"baseName\": \"protocol\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return CreditEvent.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type CreditEventEventEnum = \"Supply\" | \"Withdraw\" | \"Borrow\" | \"Repay\" | \"Accrue Interest\" | \"Flash Loan\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { MediaPreview } from './MediaPreview';\nimport { HttpFile } from '../http/http';\n\nexport class CurrencyInfo {\n    'contractAddress'?: string;\n    /**\n    * The base value for a given token. For Ethereum this would be 18. This would yield an equation such as 890000000000000000wei / 10^18 = 0.89 ETH.\n    */\n    'decimals'?: number;\n    /**\n    * The total value of this token in fiat currency.\n    */\n    'fiat'?: Array<CurrencyInfo>;\n    'name'?: string;\n    /**\n    * A formatted, human-friendly representation of the transaction value, e.g. the value in Ether, possibly with localized thousands separator and radix character.\n    */\n    'pretty'?: string;\n    'symbol'?: string;\n    /**\n    * Logo images associated with the token for a given currency.\n    */\n    'symbolLogos'?: Array<MediaPreview>;\n    /**\n    * Transaction value as a float representing the amount of tokens, e.g. 0.89 would be 89% of a token.\n    */\n    'tokenValue'?: number;\n    /**\n    * Transaction value as a string-encoded bigint in the base unit for a given blockchain (e.g. wei for Ethereum) or fiat currency (e.g. US Dollars).\n    */\n    'value'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"contractAddress\",\n            \"baseName\": \"contractAddress\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"decimals\",\n            \"baseName\": \"decimals\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"fiat\",\n            \"baseName\": \"fiat\",\n            \"type\": \"Array<CurrencyInfo>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"name\",\n            \"baseName\": \"name\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"pretty\",\n            \"baseName\": \"pretty\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"symbol\",\n            \"baseName\": \"symbol\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"symbolLogos\",\n            \"baseName\": \"symbolLogos\",\n            \"type\": \"Array<MediaPreview>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"tokenValue\",\n            \"baseName\": \"tokenValue\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"value\",\n            \"baseName\": \"value\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return CurrencyInfo.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class ENS {\n    /**\n    * Date the ENS registration expires.\n    */\n    'expires'?: Date;\n    /**\n    * A wallet address can have multiple ENS records. The primary ENS name represents a \\\"cross-platform web3 username and profile.\\\" A wallet address can only have one primary name, and it can change at any time.\n    */\n    'isPrimary'?: boolean;\n    /**\n    * The ENS or domain name.\n    */\n    'name'?: string;\n    /**\n    * The address the ENS record points to.\n    */\n    'pointsTo'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"expires\",\n            \"baseName\": \"expires\",\n            \"type\": \"Date\",\n            \"format\": \"date-time\"\n        },\n        {\n            \"name\": \"isPrimary\",\n            \"baseName\": \"isPrimary\",\n            \"type\": \"boolean\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"name\",\n            \"baseName\": \"name\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"pointsTo\",\n            \"baseName\": \"pointsTo\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return ENS.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class ErrorMessage {\n    'error': string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"error\",\n            \"baseName\": \"error\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return ErrorMessage.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class ExchangeEvent {\n    /**\n    * Human-readable, machine parsable, event descriptions for token exchange-related contract events\n    */\n    'event'?: ExchangeEventEventEnum;\n    /**\n    * Brand or identifier closely associated with a contract\n    */\n    'protocol'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"event\",\n            \"baseName\": \"event\",\n            \"type\": \"ExchangeEventEventEnum\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"protocol\",\n            \"baseName\": \"protocol\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return ExchangeEvent.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type ExchangeEventEventEnum = \"Swap\" | \"Mint\" | \"Burn\" | \"Collect Fees\" | \"Create Pool\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { MediaVersion } from './MediaVersion';\nimport { HttpFile } from '../http/http';\n\nexport class Media {\n    /**\n    * URI for the image asset.\n    */\n    'URI'?: string;\n    'key': string;\n    'version'?: Array<MediaVersion>;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"URI\",\n            \"baseName\": \"URI\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"key\",\n            \"baseName\": \"key\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"version\",\n            \"baseName\": \"version\",\n            \"type\": \"Array<MediaVersion>\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return Media.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class MediaPreview {\n    /**\n    * URI for the image asset.\n    */\n    'URI'?: string;\n    /**\n    * If a video, length of video in ISO 8601 duration format.\n    */\n    'duration'?: string;\n    'format'?: string;\n    /**\n    * The image's approximate height in pixels.\n    */\n    'height'?: number;\n    'kind'?: MediaPreviewKindEnum;\n    /**\n    * The image's approximate width in pixels.\n    */\n    'width'?: number;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"URI\",\n            \"baseName\": \"URI\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"duration\",\n            \"baseName\": \"duration\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"format\",\n            \"baseName\": \"format\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"height\",\n            \"baseName\": \"height\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"kind\",\n            \"baseName\": \"kind\",\n            \"type\": \"MediaPreviewKindEnum\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"width\",\n            \"baseName\": \"width\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return MediaPreview.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type MediaPreviewKindEnum = \"video\" | \"image\" | \"raw\" | \"audio\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class MediaVersion {\n    /**\n    * If a video, length of video in ISO 8601 duration format.\n    */\n    'duration'?: string;\n    'format'?: string;\n    'height'?: number;\n    'kind'?: MediaVersionKindEnum;\n    'numBytes'?: number;\n    'width'?: number;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"duration\",\n            \"baseName\": \"duration\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"format\",\n            \"baseName\": \"format\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"height\",\n            \"baseName\": \"height\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"kind\",\n            \"baseName\": \"kind\",\n            \"type\": \"MediaVersionKindEnum\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"numBytes\",\n            \"baseName\": \"numBytes\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"width\",\n            \"baseName\": \"width\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return MediaVersion.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type MediaVersionKindEnum = \"video\" | \"image\" | \"raw\" | \"audio\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Collection } from './Collection';\nimport { Media } from './Media';\nimport { MediaPreview } from './MediaPreview';\nimport { TokenAttribute } from './TokenAttribute';\nimport { Transaction } from './Transaction';\nimport { Wallet } from './Wallet';\nimport { HttpFile } from '../http/http';\n\nexport class NonFungibleToken {\n    'attributes'?: Array<TokenAttribute>;\n    'collection'?: Collection;\n    'contractTitle'?: string;\n    /**\n    * A description of a contract may contain markup such as HTML or Markdown.\n    */\n    'description'?: string;\n    /**\n    * A rough heuristic indicating the underlying technology and hypothetical durability of an asset. \\\"On-Chain\\\" assets store metadata and the asset media (e.g. SVG file, source code or MIDI) on a blockchain. \\\"Distributed\\\" assets are stored on decentralized protocols such as IPFS. \\\"Web\\\" assets are stored on services such as Amazon's S3. Each technology has different tradeoffs, in particular certain projects need more flexibility than is provided by on-chain data.\\\"\n    */\n    'durability'?: NonFungibleTokenDurabilityEnum;\n    'media'?: Media;\n    'owner'?: Wallet;\n    /**\n    * Transformed media assets that are resized and transcoded in to friendlier formats for web and mobile delivery.\n    */\n    'previews'?: Array<MediaPreview>;\n    /**\n    * The project name of the NFT.\n    */\n    'projectName'?: string;\n    'purchase'?: Transaction;\n    'title'?: string;\n    /**\n    * ID of this particular token.\n    */\n    'tokenID': string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"attributes\",\n            \"baseName\": \"attributes\",\n            \"type\": \"Array<TokenAttribute>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"collection\",\n            \"baseName\": \"collection\",\n            \"type\": \"Collection\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"contractTitle\",\n            \"baseName\": \"contractTitle\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"description\",\n            \"baseName\": \"description\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"durability\",\n            \"baseName\": \"durability\",\n            \"type\": \"NonFungibleTokenDurabilityEnum\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"media\",\n            \"baseName\": \"media\",\n            \"type\": \"Media\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"owner\",\n            \"baseName\": \"owner\",\n            \"type\": \"Wallet\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"previews\",\n            \"baseName\": \"previews\",\n            \"type\": \"Array<MediaPreview>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"projectName\",\n            \"baseName\": \"projectName\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"purchase\",\n            \"baseName\": \"purchase\",\n            \"type\": \"Transaction\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"title\",\n            \"baseName\": \"title\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"tokenID\",\n            \"baseName\": \"tokenID\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return NonFungibleToken.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type NonFungibleTokenDurabilityEnum = \"On-Chain\" | \"Decentralized\" | \"Web\" | \"Unknown\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class OpenSeaContract {\n    'assetContractType'?: OpenSeaContractAssetContractTypeEnum;\n    /**\n    * Total fee levied on buyers by this contract, in basis points\n    */\n    'buyerFeeBasisPoints'?: number;\n    'defaultToFiat'?: boolean;\n    /**\n    * The NFT Version\n    */\n    'nftVersion'?: string;\n    /**\n    * The OpenSea Version\n    */\n    'openSeaVersion'?: string;\n    /**\n    * Total fee levied on sellers by this contract, in basis points\n    */\n    'sellerFeeBasisPoints'?: number;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"assetContractType\",\n            \"baseName\": \"assetContractType\",\n            \"type\": \"OpenSeaContractAssetContractTypeEnum\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"buyerFeeBasisPoints\",\n            \"baseName\": \"buyerFeeBasisPoints\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"defaultToFiat\",\n            \"baseName\": \"defaultToFiat\",\n            \"type\": \"boolean\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"nftVersion\",\n            \"baseName\": \"nftVersion\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"openSeaVersion\",\n            \"baseName\": \"openSeaVersion\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"sellerFeeBasisPoints\",\n            \"baseName\": \"sellerFeeBasisPoints\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return OpenSeaContract.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n\nexport type OpenSeaContractAssetContractTypeEnum = \"NFT\" | \"SFT\" | \"unknown\" ;\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Collection } from './Collection';\nimport { CurrencyInfo } from './CurrencyInfo';\nimport { Token } from './Token';\nimport { HttpFile } from '../http/http';\n\nexport class OwnedCollection {\n    'collection'?: Collection;\n    /**\n    * A sample of the tokens owned by this wallet.\n    */\n    'tokens'?: Array<Token>;\n    'totalSpent'?: CurrencyInfo;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"collection\",\n            \"baseName\": \"collection\",\n            \"type\": \"Collection\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"tokens\",\n            \"baseName\": \"tokens\",\n            \"type\": \"Array<Token>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"totalSpent\",\n            \"baseName\": \"totalSpent\",\n            \"type\": \"CurrencyInfo\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return OwnedCollection.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Collection } from './Collection';\nimport { Token } from './Token';\nimport { Wallet } from './Wallet';\nimport { HttpFile } from '../http/http';\n\nexport class SearchDocument {\n    'collection'?: Collection;\n    'token'?: Token;\n    'wallet'?: Wallet;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"collection\",\n            \"baseName\": \"collection\",\n            \"type\": \"Collection\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"token\",\n            \"baseName\": \"token\",\n            \"type\": \"Token\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"wallet\",\n            \"baseName\": \"wallet\",\n            \"type\": \"Wallet\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return SearchDocument.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class SocialMedia {\n    'network'?: string;\n    'username'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"network\",\n            \"baseName\": \"network\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"username\",\n            \"baseName\": \"username\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return SocialMedia.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { BlockchainInfo } from './BlockchainInfo';\nimport { NonFungibleToken } from './NonFungibleToken';\nimport { OpenSeaContract } from './OpenSeaContract';\nimport { HttpFile } from '../http/http';\n\nexport class Token {\n    'blockchain': BlockchainInfo;\n    /**\n    * Address of the contract that minted this NFT.\n    */\n    'contractAddress': string;\n    'nft'?: NonFungibleToken;\n    'openSeaContract'?: OpenSeaContract;\n    'symbol'?: string;\n    'tokenStandard'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"blockchain\",\n            \"baseName\": \"blockchain\",\n            \"type\": \"BlockchainInfo\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"contractAddress\",\n            \"baseName\": \"contractAddress\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"nft\",\n            \"baseName\": \"nft\",\n            \"type\": \"NonFungibleToken\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"openSeaContract\",\n            \"baseName\": \"openSeaContract\",\n            \"type\": \"OpenSeaContract\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"symbol\",\n            \"baseName\": \"symbol\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"tokenStandard\",\n            \"baseName\": \"tokenStandard\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return Token.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class TokenAttribute {\n    /**\n    * The key or kind of trait.\n    */\n    'traitType'?: string;\n    /**\n    * A distinct attribute belonging to a particular type of trait.\n    */\n    'value'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"traitType\",\n            \"baseName\": \"traitType\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"value\",\n            \"baseName\": \"value\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return TokenAttribute.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Token } from './Token';\nimport { Transaction } from './Transaction';\nimport { HttpFile } from '../http/http';\n\nexport class TokenEvents {\n    /**\n    * A list of the events for a token.\n    */\n    'events'?: Array<Transaction>;\n    /**\n    * Metadata for the token specified in the request.\n    */\n    'token'?: Array<Token>;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"events\",\n            \"baseName\": \"events\",\n            \"type\": \"Array<Transaction>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"token\",\n            \"baseName\": \"token\",\n            \"type\": \"Array<Token>\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return TokenEvents.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { CurrencyInfo } from './CurrencyInfo';\nimport { TransactionLogLine } from './TransactionLogLine';\nimport { HttpFile } from '../http/http';\n\nexport class Transaction {\n    /**\n    * Block number of the transaction.\n    */\n    'blockNumber'?: number;\n    'gasFee'?: CurrencyInfo;\n    /**\n    * Log lines related to the transaction.\n    */\n    'logLine'?: Array<TransactionLogLine>;\n    /**\n    * Timestamp of the transaction in RFC 3339.\n    */\n    'timestamp'?: Date;\n    /**\n    * A token ID if the transaction was related to an NFT\n    */\n    'tokenID'?: string;\n    /**\n    * TransactionHash for this transaction.\n    */\n    'transactionHash'?: string;\n    /**\n    * Index of the transaction in the block.\n    */\n    'transactionIndex'?: number;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"blockNumber\",\n            \"baseName\": \"blockNumber\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"gasFee\",\n            \"baseName\": \"gasFee\",\n            \"type\": \"CurrencyInfo\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"logLine\",\n            \"baseName\": \"logLine\",\n            \"type\": \"Array<TransactionLogLine>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"timestamp\",\n            \"baseName\": \"timestamp\",\n            \"type\": \"Date\",\n            \"format\": \"date-time\"\n        },\n        {\n            \"name\": \"tokenID\",\n            \"baseName\": \"tokenID\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"transactionHash\",\n            \"baseName\": \"transactionHash\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"transactionIndex\",\n            \"baseName\": \"transactionIndex\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return Transaction.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { CurrencyInfo } from './CurrencyInfo';\nimport { HttpFile } from '../http/http';\n\nexport class TransactionLogLine {\n    /**\n    * When the value is true, it indicates that a token has been burned, and this transaction corresponds to the burn.\n    */\n    'burned'?: boolean;\n    'fromAddress'?: string;\n    /**\n    * Index of the log in the transaction.\n    */\n    'logIndex'?: number;\n    /**\n    * When the value is true, it indicates this is the transaction representing a token minting.\n    */\n    'mint'?: boolean;\n    'price'?: CurrencyInfo;\n    'toAddress'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"burned\",\n            \"baseName\": \"burned\",\n            \"type\": \"boolean\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"fromAddress\",\n            \"baseName\": \"fromAddress\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"logIndex\",\n            \"baseName\": \"logIndex\",\n            \"type\": \"number\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"mint\",\n            \"baseName\": \"mint\",\n            \"type\": \"boolean\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"price\",\n            \"baseName\": \"price\",\n            \"type\": \"CurrencyInfo\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"toAddress\",\n            \"baseName\": \"toAddress\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return TransactionLogLine.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { HttpFile } from '../http/http';\n\nexport class URL {\n    /**\n    * Human-readable name of the site.\n    */\n    'name'?: string;\n    'url'?: string;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"name\",\n            \"baseName\": \"name\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"url\",\n            \"baseName\": \"url\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return URL.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.23.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { CurrencyInfo } from './CurrencyInfo';\nimport { ENS } from './ENS';\nimport { OwnedCollection } from './OwnedCollection';\nimport { SocialMedia } from './SocialMedia';\nimport { Token } from './Token';\nimport { Transaction } from './Transaction';\nimport { HttpFile } from '../http/http';\n\nexport class Wallet {\n    'address': string;\n    /**\n    * The balance of fungible tokens from smart contracts or blockchains. Certain non-standard ERC-20 tokens (e.g. stETH) may occasionally have stale balances, for example interest payments can be slow to update.\n    */\n    'balances'?: Array<CurrencyInfo>;\n    /**\n    * A sample of the collections this wallet owns.\n    */\n    'collections'?: Array<OwnedCollection>;\n    'ens'?: Array<ENS>;\n    /**\n    * A reverse-chronological list of the latest transactions for a wallet.\n    */\n    'history'?: Array<Transaction>;\n    /**\n    * A sample of the most recently transferred tokens owned by this wallet.\n    */\n    'recentTokens'?: Array<Token>;\n    'socialMedia'?: Array<SocialMedia>;\n    /**\n    * A sample of the most expensive tokens owned by this wallet.\n    */\n    'topTokens'?: Array<Token>;\n    /**\n    * The total balance in a fiat currency (e.g. USD) for the wallet.\n    */\n    'totalBalance'?: Array<CurrencyInfo>;\n\n    static readonly discriminator: string | undefined = undefined;\n\n    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [\n        {\n            \"name\": \"address\",\n            \"baseName\": \"address\",\n            \"type\": \"string\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"balances\",\n            \"baseName\": \"balances\",\n            \"type\": \"Array<CurrencyInfo>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"collections\",\n            \"baseName\": \"collections\",\n            \"type\": \"Array<OwnedCollection>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"ens\",\n            \"baseName\": \"ens\",\n            \"type\": \"Array<ENS>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"history\",\n            \"baseName\": \"history\",\n            \"type\": \"Array<Transaction>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"recentTokens\",\n            \"baseName\": \"recentTokens\",\n            \"type\": \"Array<Token>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"socialMedia\",\n            \"baseName\": \"socialMedia\",\n            \"type\": \"Array<SocialMedia>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"topTokens\",\n            \"baseName\": \"topTokens\",\n            \"type\": \"Array<Token>\",\n            \"format\": \"\"\n        },\n        {\n            \"name\": \"totalBalance\",\n            \"baseName\": \"totalBalance\",\n            \"type\": \"Array<CurrencyInfo>\",\n            \"format\": \"\"\n        }    ];\n\n    static getAttributeTypeMap() {\n        return Wallet.attributeTypeMap;\n    }\n\n    public constructor() {\n    }\n}\n\n","import { HttpLibrary } from \"./http/http\";\nimport { Middleware, PromiseMiddleware, PromiseMiddlewareWrapper } from \"./middleware\";\nimport { IsomorphicFetchHttpLibrary as DefaultHttpLibrary } from \"./http/isomorphic-fetch\";\nimport { BaseServerConfiguration, server1 } from \"./servers\";\nimport { configureAuthMethods, AuthMethods, AuthMethodsConfiguration } from \"./auth/auth\";\n\nexport interface Configuration {\n    readonly baseServer: BaseServerConfiguration;\n    readonly httpApi: HttpLibrary;\n    readonly middleware: Middleware[];\n    readonly authMethods: AuthMethods;\n}\n\n\n/**\n * Interface with which a configuration object can be configured.\n */\nexport interface ConfigurationParameters {\n    /**\n     * Default server to use\n     */\n    baseServer?: BaseServerConfiguration;\n    /**\n     * HTTP library to use e.g. IsomorphicFetch\n     */\n    httpApi?: HttpLibrary;\n    /**\n     * The middlewares which will be applied to requests and responses\n     */\n    middleware?: Middleware[];\n    /**\n     * Configures all middlewares using the promise api instead of observables (which Middleware uses)\n     */\n    promiseMiddleware?: PromiseMiddleware[];\n    /**\n     * Configuration for the available authentication methods\n     */\n    authMethods?: AuthMethodsConfiguration\n}\n\n/**\n * Configuration factory function\n *\n * If a property is not included in conf, a default is used:\n *    - baseServer: server1\n *    - httpApi: IsomorphicFetchHttpLibrary\n *    - middleware: []\n *    - promiseMiddleware: []\n *    - authMethods: {}\n *\n * @param conf partial configuration\n */\nexport function createConfiguration(conf: ConfigurationParameters = {}): Configuration {\n    const configuration: Configuration = {\n        baseServer: conf.baseServer !== undefined ? conf.baseServer : server1,\n        httpApi: conf.httpApi || new DefaultHttpLibrary(),\n        middleware: conf.middleware || [],\n        authMethods: configureAuthMethods(conf.authMethods)\n    };\n    if (conf.promiseMiddleware) {\n        conf.promiseMiddleware.forEach(\n            m => configuration.middleware.push(new PromiseMiddlewareWrapper(m))\n        );\n    }\n    return configuration;\n}","import {RequestContext, ResponseContext} from './http/http';\nimport { Observable, from } from './rxjsStub';\n\n/**\n * Defines the contract for a middleware intercepting requests before\n * they are sent (but after the RequestContext was created)\n * and before the ResponseContext is unwrapped.\n *\n */\nexport interface Middleware {\n    /**\n     * Modifies the request before the request is sent.\n     *\n     * @param context RequestContext of a request which is about to be sent to the server\n     * @returns an observable of the updated request context\n     *\n     */\n    pre(context: RequestContext): Observable<RequestContext>;\n    /**\n     * Modifies the returned response before it is deserialized.\n     *\n     * @param context ResponseContext of a sent request\n     * @returns an observable of the modified response context\n     */\n    post(context: ResponseContext): Observable<ResponseContext>;\n}\n\nexport class PromiseMiddlewareWrapper implements Middleware {\n\n    public constructor(private middleware: PromiseMiddleware) {\n\n    }\n\n    pre(context: RequestContext): Observable<RequestContext> {\n        return from(this.middleware.pre(context));\n    }\n\n    post(context: ResponseContext): Observable<ResponseContext> {\n        return from(this.middleware.post(context));\n    }\n\n}\n\n/**\n * Defines the contract for a middleware intercepting requests before\n * they are sent (but after the RequestContext was created)\n * and before the ResponseContext is unwrapped.\n *\n */\nexport interface PromiseMiddleware {\n    /**\n     * Modifies the request before the request is sent.\n     *\n     * @param context RequestContext of a request which is about to be sent to the server\n     * @returns an observable of the updated request context\n     *\n     */\n    pre(context: RequestContext): Promise<RequestContext>;\n        /**\n     * Modifies the returned response before it is deserialized.\n     *\n     * @param context ResponseContext of a sent request\n     * @returns an observable of the modified response context\n     */\n    post(context: ResponseContext): Promise<ResponseContext>;\n}\n","import { RequestContext, HttpMethod } from \"./http/http\";\n\nexport interface BaseServerConfiguration {\n    makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext;\n}\n\n/**\n *\n * Represents the configuration of a server including its\n * url template and variable configuration based on the url.\n *\n */\nexport class ServerConfiguration<T extends { [key: string]: string }> implements BaseServerConfiguration {\n    public constructor(private url: string, private variableConfiguration: T) {}\n\n    /**\n     * Sets the value of the variables of this server.\n     *\n     * @param variableConfiguration a partial variable configuration for the variables contained in the url\n     */\n    public setVariables(variableConfiguration: Partial<T>) {\n        Object.assign(this.variableConfiguration, variableConfiguration);\n    }\n\n    public getConfiguration(): T {\n        return this.variableConfiguration\n    }\n\n    private getUrl() {\n        let replacedUrl = this.url;\n        for (const key in this.variableConfiguration) {\n            var re = new RegExp(\"{\" + key + \"}\",\"g\");\n            replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);\n        }\n        return replacedUrl\n    }\n\n    /**\n     * Creates a new request context for this server using the url with variables\n     * replaced with their respective values and the endpoint of the request appended.\n     *\n     * @param endpoint the endpoint to be queried on the server\n     * @param httpMethod httpMethod to be used\n     *\n     */\n    public makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext {\n        return new RequestContext(this.getUrl() + endpoint, httpMethod);\n    }\n}\n\nexport const server1 = new ServerConfiguration<{  }>(\"https://api.n.xyz\", {  })\n\nexport const servers = [server1];\n","/**\n * Represents an error caused by an api call i.e. it has attributes for a HTTP status code\n * and the returned body object.\n *\n * Example\n * API returns a ErrorMessageObject whenever HTTP status code is not in [200, 299]\n * => ApiException(404, someErrorMessageObject)\n *\n */\nexport class ApiException<T> extends Error {\n    public constructor(public code: number, message: string, public body: T, public headers: { [key: string]: string; }) {\n        super(\"HTTP-Code: \" + code + \"\\nMessage: \" + message + \"\\nBody: \" + JSON.stringify(body) + \"\\nHeaders: \" +\n        JSON.stringify(headers))\n    }\n}\n","import { Configuration } from '../configuration'\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPIRequestFactory {\n\n    constructor(protected configuration: Configuration) {\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public api: string, public method: string, public field: string) {\n        super(\"Required parameter \" + field + \" was null or undefined when calling \" + api + \".\" + method + \".\");\n    }\n}\n","import { ResponseContext, RequestContext, HttpFile } from '../http/http';\nimport * as models from '../models/all';\nimport { Configuration} from '../configuration'\n\nimport { AssetGate } from '../models/AssetGate';\nimport { AutoSuggestion } from '../models/AutoSuggestion';\nimport { BlockchainInfo } from '../models/BlockchainInfo';\nimport { Collection } from '../models/Collection';\nimport { CreditEvent } from '../models/CreditEvent';\nimport { CurrencyInfo } from '../models/CurrencyInfo';\nimport { ENS } from '../models/ENS';\nimport { ErrorMessage } from '../models/ErrorMessage';\nimport { ExchangeEvent } from '../models/ExchangeEvent';\nimport { Media } from '../models/Media';\nimport { MediaPreview } from '../models/MediaPreview';\nimport { MediaVersion } from '../models/MediaVersion';\nimport { NonFungibleToken } from '../models/NonFungibleToken';\nimport { OpenSeaContract } from '../models/OpenSeaContract';\nimport { OwnedCollection } from '../models/OwnedCollection';\nimport { SearchDocument } from '../models/SearchDocument';\nimport { SocialMedia } from '../models/SocialMedia';\nimport { Token } from '../models/Token';\nimport { TokenAttribute } from '../models/TokenAttribute';\nimport { TokenEvents } from '../models/TokenEvents';\nimport { Transaction } from '../models/Transaction';\nimport { TransactionLogLine } from '../models/TransactionLogLine';\nimport { URL } from '../models/URL';\nimport { Wallet } from '../models/Wallet';\nimport { ObservableAlphaApi } from './ObservableAPI';\n\nimport { AlphaApiRequestFactory, AlphaApiResponseProcessor} from \"../apis/AlphaApi\";\nexport class PromiseAlphaApi {\n    private api: ObservableAlphaApi\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: AlphaApiRequestFactory,\n        responseProcessor?: AlphaApiResponseProcessor\n    ) {\n        this.api = new ObservableAlphaApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public getTopCollections(_options?: Configuration): Promise<Array<Collection>> {\n        const result = this.api.getTopCollections(_options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public getTopTokens(_options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getTopTokens(_options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public getTopWallets(_options?: Configuration): Promise<Array<Wallet>> {\n        const result = this.api.getTopWallets(_options);\n        return result.toPromise();\n    }\n\n\n}\n\n\n\nimport { ObservableDefaultApi } from './ObservableAPI';\n\nimport { DefaultApiRequestFactory, DefaultApiResponseProcessor} from \"../apis/DefaultApi\";\nexport class PromiseDefaultApi {\n    private api: ObservableDefaultApi\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: DefaultApiRequestFactory,\n        responseProcessor?: DefaultApiResponseProcessor\n    ) {\n        this.api = new ObservableDefaultApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Lists all supported blockchains.\n     */\n    public getBlockchains(_options?: Configuration): Promise<Array<BlockchainInfo>> {\n        const result = this.api.getBlockchains(_options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get a collection by its contract address.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getCollection(contractAddress: string, chainID?: string, _options?: Configuration): Promise<Array<Collection>> {\n        const result = this.api.getCollection(contractAddress, chainID, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Determine if a wallet has any token from a contract.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getContractGate(contractAddress: string, walletAddress: string, chainID?: string, _options?: Configuration): Promise<AssetGate> {\n        const result = this.api.getContractGate(contractAddress, walletAddress, chainID, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get tokens by contract address.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getContractTokens(contractAddress: string, chainID?: string, limit?: number, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getContractTokens(contractAddress, chainID, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns tokens from a batch lookup.\n     * @param contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n     * @param tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getContractTokensByContractAndID(contractAddresses, tokenIdentifiers, chainID, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get the transaction history for a collection\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param cursor Cursor to support API pagination.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, _options?: Configuration): Promise<Array<Transaction>> {\n        const result = this.api.getContractTransactionHistory(contractAddress, cursor, chainID, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get search results such as wallets, tokens, and collections by a search query.\n     * @param query A search query that returns matching results\n     * @param cursor Cursor to support API pagination.\n     */\n    public getSearchResults(query: string, cursor?: string, _options?: Configuration): Promise<Array<SearchDocument>> {\n        const result = this.api.getSearchResults(query, cursor, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns a list of tokens sold by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getSoldTokens(walletAddress, chainID, cursor, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get autocomplete-style search suggestions for results.\n     * @param query A query or partial query that can be used to retrieve suggested results. For example \\&quot;bored a\\&quot; would return a suggestion for \\&quot;bored ape.\\&quot;\n     */\n    public getSuggestionsResults(query?: string, _options?: Configuration): Promise<Array<AutoSuggestion>> {\n        const result = this.api.getSuggestionsResults(query, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get a token by its contract address and token ID.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getToken(contractAddress: string, tokenID: string, chainID?: string, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getToken(contractAddress, tokenID, chainID, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Determine if a wallet has a given token from a contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, _options?: Configuration): Promise<AssetGate> {\n        const result = this.api.getTokenGate(tokenID, contractAddress, walletAddress, chainID, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns a list of transfer transactions on a specified token.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, _options?: Configuration): Promise<TokenEvents> {\n        const result = this.api.getTokenTransfers(contractAddress, tokenID, chainID, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get tokens by a search query.\n     * @param query A search query that returns matching results\n     * @param cursor Cursor to support API pagination.\n     */\n    public getTokensBySearchQuery(query: string, cursor?: string, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getTokensBySearchQuery(query, cursor, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Get a wallet by a wallet address\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getWallet(walletAddress: string, chainID?: string, _options?: Configuration): Promise<Array<Wallet>> {\n        const result = this.api.getWallet(walletAddress, chainID, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns a list of balances for tokens this wallet currently owns.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getWalletBalances(walletAddress: string, limit?: number, _options?: Configuration): Promise<Array<CurrencyInfo>> {\n        const result = this.api.getWalletBalances(walletAddress, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns a list of tokens minted by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getWalletMints(walletAddress, chainID, cursor, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns a list of tokens owned by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param cursor Cursor to support API pagination.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, _options?: Configuration): Promise<Array<Token>> {\n        const result = this.api.getWalletTokens(walletAddress, cursor, chainID, limit, _options);\n        return result.toPromise();\n    }\n\n    /**\n     * Returns transactions related to a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param tokenType An indicator that be used to filter to only a subet of tokens, for example only NFTs. To select ERC-20, sidechain and L1 transactions, use the \\&quot;fungible.\\&quot; To select only NFTs or semi-fungible tokens (SFTs), use the respective enum.\n     */\n    public getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'native' | 'fungible' | 'NFT' | 'SFT' | 'unknown', _options?: Configuration): Promise<Array<Transaction>> {\n        const result = this.api.getWalletTransactions(walletAddress, cursor, limit, chainID, tokenType, _options);\n        return result.toPromise();\n    }\n\n\n}\n\n\n\n","import { ResponseContext, RequestContext, HttpFile } from '../http/http';\nimport * as models from '../models/all';\nimport { Configuration} from '../configuration'\nimport { Observable, of, from } from '../rxjsStub';\nimport {mergeMap, map} from  '../rxjsStub';\nimport { AssetGate } from '../models/AssetGate';\nimport { AutoSuggestion } from '../models/AutoSuggestion';\nimport { BlockchainInfo } from '../models/BlockchainInfo';\nimport { Collection } from '../models/Collection';\nimport { CreditEvent } from '../models/CreditEvent';\nimport { CurrencyInfo } from '../models/CurrencyInfo';\nimport { ENS } from '../models/ENS';\nimport { ErrorMessage } from '../models/ErrorMessage';\nimport { ExchangeEvent } from '../models/ExchangeEvent';\nimport { Media } from '../models/Media';\nimport { MediaPreview } from '../models/MediaPreview';\nimport { MediaVersion } from '../models/MediaVersion';\nimport { NonFungibleToken } from '../models/NonFungibleToken';\nimport { OpenSeaContract } from '../models/OpenSeaContract';\nimport { OwnedCollection } from '../models/OwnedCollection';\nimport { SearchDocument } from '../models/SearchDocument';\nimport { SocialMedia } from '../models/SocialMedia';\nimport { Token } from '../models/Token';\nimport { TokenAttribute } from '../models/TokenAttribute';\nimport { TokenEvents } from '../models/TokenEvents';\nimport { Transaction } from '../models/Transaction';\nimport { TransactionLogLine } from '../models/TransactionLogLine';\nimport { URL } from '../models/URL';\nimport { Wallet } from '../models/Wallet';\n\nimport { AlphaApiRequestFactory, AlphaApiResponseProcessor} from \"../apis/AlphaApi\";\nexport class ObservableAlphaApi {\n    private requestFactory: AlphaApiRequestFactory;\n    private responseProcessor: AlphaApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: AlphaApiRequestFactory,\n        responseProcessor?: AlphaApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new AlphaApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new AlphaApiResponseProcessor();\n    }\n\n    /**\n     * Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public getTopCollections(_options?: Configuration): Observable<Array<Collection>> {\n        const requestContextPromise = this.requestFactory.getTopCollections(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getTopCollections(rsp)));\n            }));\n    }\n\n    /**\n     * Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public getTopTokens(_options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getTopTokens(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getTopTokens(rsp)));\n            }));\n    }\n\n    /**\n     * Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public getTopWallets(_options?: Configuration): Observable<Array<Wallet>> {\n        const requestContextPromise = this.requestFactory.getTopWallets(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getTopWallets(rsp)));\n            }));\n    }\n\n}\n\nimport { DefaultApiRequestFactory, DefaultApiResponseProcessor} from \"../apis/DefaultApi\";\nexport class ObservableDefaultApi {\n    private requestFactory: DefaultApiRequestFactory;\n    private responseProcessor: DefaultApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: DefaultApiRequestFactory,\n        responseProcessor?: DefaultApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new DefaultApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new DefaultApiResponseProcessor();\n    }\n\n    /**\n     * Lists all supported blockchains.\n     */\n    public getBlockchains(_options?: Configuration): Observable<Array<BlockchainInfo>> {\n        const requestContextPromise = this.requestFactory.getBlockchains(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getBlockchains(rsp)));\n            }));\n    }\n\n    /**\n     * Get a collection by its contract address.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getCollection(contractAddress: string, chainID?: string, _options?: Configuration): Observable<Array<Collection>> {\n        const requestContextPromise = this.requestFactory.getCollection(contractAddress, chainID, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getCollection(rsp)));\n            }));\n    }\n\n    /**\n     * Determine if a wallet has any token from a contract.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getContractGate(contractAddress: string, walletAddress: string, chainID?: string, _options?: Configuration): Observable<AssetGate> {\n        const requestContextPromise = this.requestFactory.getContractGate(contractAddress, walletAddress, chainID, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getContractGate(rsp)));\n            }));\n    }\n\n    /**\n     * Get tokens by contract address.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getContractTokens(contractAddress: string, chainID?: string, limit?: number, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getContractTokens(contractAddress, chainID, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getContractTokens(rsp)));\n            }));\n    }\n\n    /**\n     * Returns tokens from a batch lookup.\n     * @param contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n     * @param tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getContractTokensByContractAndID(contractAddresses, tokenIdentifiers, chainID, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getContractTokensByContractAndID(rsp)));\n            }));\n    }\n\n    /**\n     * Get the transaction history for a collection\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param cursor Cursor to support API pagination.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, _options?: Configuration): Observable<Array<Transaction>> {\n        const requestContextPromise = this.requestFactory.getContractTransactionHistory(contractAddress, cursor, chainID, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getContractTransactionHistory(rsp)));\n            }));\n    }\n\n    /**\n     * Get search results such as wallets, tokens, and collections by a search query.\n     * @param query A search query that returns matching results\n     * @param cursor Cursor to support API pagination.\n     */\n    public getSearchResults(query: string, cursor?: string, _options?: Configuration): Observable<Array<SearchDocument>> {\n        const requestContextPromise = this.requestFactory.getSearchResults(query, cursor, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getSearchResults(rsp)));\n            }));\n    }\n\n    /**\n     * Returns a list of tokens sold by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getSoldTokens(walletAddress, chainID, cursor, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getSoldTokens(rsp)));\n            }));\n    }\n\n    /**\n     * Get autocomplete-style search suggestions for results.\n     * @param query A query or partial query that can be used to retrieve suggested results. For example \\&quot;bored a\\&quot; would return a suggestion for \\&quot;bored ape.\\&quot;\n     */\n    public getSuggestionsResults(query?: string, _options?: Configuration): Observable<Array<AutoSuggestion>> {\n        const requestContextPromise = this.requestFactory.getSuggestionsResults(query, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getSuggestionsResults(rsp)));\n            }));\n    }\n\n    /**\n     * Get a token by its contract address and token ID.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getToken(contractAddress: string, tokenID: string, chainID?: string, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getToken(contractAddress, tokenID, chainID, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getToken(rsp)));\n            }));\n    }\n\n    /**\n     * Determine if a wallet has a given token from a contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, _options?: Configuration): Observable<AssetGate> {\n        const requestContextPromise = this.requestFactory.getTokenGate(tokenID, contractAddress, walletAddress, chainID, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getTokenGate(rsp)));\n            }));\n    }\n\n    /**\n     * Returns a list of transfer transactions on a specified token.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, _options?: Configuration): Observable<TokenEvents> {\n        const requestContextPromise = this.requestFactory.getTokenTransfers(contractAddress, tokenID, chainID, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getTokenTransfers(rsp)));\n            }));\n    }\n\n    /**\n     * Get tokens by a search query.\n     * @param query A search query that returns matching results\n     * @param cursor Cursor to support API pagination.\n     */\n    public getTokensBySearchQuery(query: string, cursor?: string, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getTokensBySearchQuery(query, cursor, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getTokensBySearchQuery(rsp)));\n            }));\n    }\n\n    /**\n     * Get a wallet by a wallet address\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public getWallet(walletAddress: string, chainID?: string, _options?: Configuration): Observable<Array<Wallet>> {\n        const requestContextPromise = this.requestFactory.getWallet(walletAddress, chainID, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getWallet(rsp)));\n            }));\n    }\n\n    /**\n     * Returns a list of balances for tokens this wallet currently owns.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getWalletBalances(walletAddress: string, limit?: number, _options?: Configuration): Observable<Array<CurrencyInfo>> {\n        const requestContextPromise = this.requestFactory.getWalletBalances(walletAddress, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getWalletBalances(rsp)));\n            }));\n    }\n\n    /**\n     * Returns a list of tokens minted by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getWalletMints(walletAddress, chainID, cursor, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getWalletMints(rsp)));\n            }));\n    }\n\n    /**\n     * Returns a list of tokens owned by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param cursor Cursor to support API pagination.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, _options?: Configuration): Observable<Array<Token>> {\n        const requestContextPromise = this.requestFactory.getWalletTokens(walletAddress, cursor, chainID, limit, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getWalletTokens(rsp)));\n            }));\n    }\n\n    /**\n     * Returns transactions related to a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param tokenType An indicator that be used to filter to only a subet of tokens, for example only NFTs. To select ERC-20, sidechain and L1 transactions, use the \\&quot;fungible.\\&quot; To select only NFTs or semi-fungible tokens (SFTs), use the respective enum.\n     */\n    public getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'native' | 'fungible' | 'NFT' | 'SFT' | 'unknown', _options?: Configuration): Observable<Array<Transaction>> {\n        const requestContextPromise = this.requestFactory.getWalletTransactions(walletAddress, cursor, limit, chainID, tokenType, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getWalletTransactions(rsp)));\n            }));\n    }\n\n}\n","// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { Collection } from '../models/Collection';\nimport { ErrorMessage } from '../models/ErrorMessage';\nimport { Token } from '../models/Token';\nimport { Wallet } from '../models/Wallet';\n\n/**\n * no description\n */\nexport class AlphaApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public async getTopCollections(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1-alpha/collections/top';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public async getTopTokens(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1-alpha/tokens/top';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     */\n    public async getTopWallets(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1-alpha/wallets/top';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class AlphaApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getTopCollections\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getTopCollections(response: ResponseContext): Promise<Array<Collection> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Collection> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Collection>\", \"\"\n            ) as Array<Collection>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Collection> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Collection>\", \"\"\n            ) as Array<Collection>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getTopTokens\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getTopTokens(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getTopWallets\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getTopWallets(response: ResponseContext): Promise<Array<Wallet> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Wallet> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Wallet>\", \"\"\n            ) as Array<Wallet>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Wallet> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Wallet>\", \"\"\n            ) as Array<Wallet>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n","export * from './AssetGate';\nexport * from './AutoSuggestion';\nexport * from './BlockchainInfo';\nexport * from './Collection';\nexport * from './CreditEvent';\nexport * from './CurrencyInfo';\nexport * from './ENS';\nexport * from './ErrorMessage';\nexport * from './ExchangeEvent';\nexport * from './Media';\nexport * from './MediaPreview';\nexport * from './MediaVersion';\nexport * from './NonFungibleToken';\nexport * from './OpenSeaContract';\nexport * from './OwnedCollection';\nexport * from './SearchDocument';\nexport * from './SocialMedia';\nexport * from './Token';\nexport * from './TokenAttribute';\nexport * from './TokenEvents';\nexport * from './Transaction';\nexport * from './TransactionLogLine';\nexport * from './URL';\nexport * from './Wallet';\n\nimport { AssetGate } from './AssetGate';\nimport { AutoSuggestion  , AutoSuggestionTypeEnum   } from './AutoSuggestion';\nimport { BlockchainInfo } from './BlockchainInfo';\nimport { Collection } from './Collection';\nimport { CreditEvent, CreditEventEventEnum    } from './CreditEvent';\nimport { CurrencyInfo } from './CurrencyInfo';\nimport { ENS } from './ENS';\nimport { ErrorMessage } from './ErrorMessage';\nimport { ExchangeEvent, ExchangeEventEventEnum    } from './ExchangeEvent';\nimport { Media } from './Media';\nimport { MediaPreview    , MediaPreviewKindEnum    } from './MediaPreview';\nimport { MediaVersion   , MediaVersionKindEnum     } from './MediaVersion';\nimport { NonFungibleToken    , NonFungibleTokenDurabilityEnum          } from './NonFungibleToken';\nimport { OpenSeaContract, OpenSeaContractAssetContractTypeEnum        } from './OpenSeaContract';\nimport { OwnedCollection } from './OwnedCollection';\nimport { SearchDocument } from './SearchDocument';\nimport { SocialMedia } from './SocialMedia';\nimport { Token } from './Token';\nimport { TokenAttribute } from './TokenAttribute';\nimport { TokenEvents } from './TokenEvents';\nimport { Transaction } from './Transaction';\nimport { TransactionLogLine } from './TransactionLogLine';\nimport { URL } from './URL';\nimport { Wallet } from './Wallet';\n\n/* tslint:disable:no-unused-variable */\nlet primitives = [\n                    \"string\",\n                    \"boolean\",\n                    \"double\",\n                    \"integer\",\n                    \"long\",\n                    \"float\",\n                    \"number\",\n                    \"any\"\n                 ];\n\nconst supportedMediaTypes: { [mediaType: string]: number } = {\n  \"application/json\": Infinity,\n  \"application/octet-stream\": 0,\n  \"application/x-www-form-urlencoded\": 0\n}\n\n\nlet enumsMap: Set<string> = new Set<string>([\n    \"AutoSuggestionTypeEnum\",\n    \"CreditEventEventEnum\",\n    \"ExchangeEventEventEnum\",\n    \"MediaPreviewKindEnum\",\n    \"MediaVersionKindEnum\",\n    \"NonFungibleTokenDurabilityEnum\",\n    \"OpenSeaContractAssetContractTypeEnum\",\n]);\n\nlet typeMap: {[index: string]: any} = {\n    \"AssetGate\": AssetGate,\n    \"AutoSuggestion\": AutoSuggestion,\n    \"BlockchainInfo\": BlockchainInfo,\n    \"Collection\": Collection,\n    \"CreditEvent\": CreditEvent,\n    \"CurrencyInfo\": CurrencyInfo,\n    \"ENS\": ENS,\n    \"ErrorMessage\": ErrorMessage,\n    \"ExchangeEvent\": ExchangeEvent,\n    \"Media\": Media,\n    \"MediaPreview\": MediaPreview,\n    \"MediaVersion\": MediaVersion,\n    \"NonFungibleToken\": NonFungibleToken,\n    \"OpenSeaContract\": OpenSeaContract,\n    \"OwnedCollection\": OwnedCollection,\n    \"SearchDocument\": SearchDocument,\n    \"SocialMedia\": SocialMedia,\n    \"Token\": Token,\n    \"TokenAttribute\": TokenAttribute,\n    \"TokenEvents\": TokenEvents,\n    \"Transaction\": Transaction,\n    \"TransactionLogLine\": TransactionLogLine,\n    \"URL\": URL,\n    \"Wallet\": Wallet,\n}\n\nexport class ObjectSerializer {\n    public static findCorrectType(data: any, expectedType: string) {\n        if (data == undefined) {\n            return expectedType;\n        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {\n            return expectedType;\n        } else if (expectedType === \"Date\") {\n            return expectedType;\n        } else {\n            if (enumsMap.has(expectedType)) {\n                return expectedType;\n            }\n\n            if (!typeMap[expectedType]) {\n                return expectedType; // w/e we don't know the type\n            }\n\n            // Check the discriminator\n            let discriminatorProperty = typeMap[expectedType].discriminator;\n            if (discriminatorProperty == null) {\n                return expectedType; // the type does not have a discriminator. use it.\n            } else {\n                if (data[discriminatorProperty]) {\n                    var discriminatorType = data[discriminatorProperty];\n                    if(typeMap[discriminatorType]){\n                        return discriminatorType; // use the type given in the discriminator\n                    } else {\n                        return expectedType; // discriminator did not map to a type\n                    }\n                } else {\n                    return expectedType; // discriminator was not present (or an empty string)\n                }\n            }\n        }\n    }\n\n    public static serialize(data: any, type: string, format: string) {\n        if (data == undefined) {\n            return data;\n        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {\n            return data;\n        } else if (type.lastIndexOf(\"Array<\", 0) === 0) { // string.startsWith pre es6\n            let subType: string = type.replace(\"Array<\", \"\"); // Array<Type> => Type>\n            subType = subType.substring(0, subType.length - 1); // Type> => Type\n            let transformedData: any[] = [];\n            for (let index in data) {\n                let date = data[index];\n                transformedData.push(ObjectSerializer.serialize(date, subType, format));\n            }\n            return transformedData;\n        } else if (type === \"Date\") {\n            if (format == \"date\") {\n                let month = data.getMonth()+1\n                month = month < 10 ? \"0\" + month.toString() : month.toString()\n                let day = data.getDate();\n                day = day < 10 ? \"0\" + day.toString() : day.toString();\n\n                return data.getFullYear() + \"-\" + month + \"-\" + day;\n            } else {\n                return data.toISOString();\n            }\n        } else {\n            if (enumsMap.has(type)) {\n                return data;\n            }\n            if (!typeMap[type]) { // in case we dont know the type\n                return data;\n            }\n\n            // Get the actual type of this object\n            type = this.findCorrectType(data, type);\n\n            // get the map for the correct type.\n            let attributeTypes = typeMap[type].getAttributeTypeMap();\n            let instance: {[index: string]: any} = {};\n            for (let index in attributeTypes) {\n                let attributeType = attributeTypes[index];\n                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);\n            }\n            return instance;\n        }\n    }\n\n    public static deserialize(data: any, type: string, format: string) {\n        // polymorphism may change the actual type.\n        type = ObjectSerializer.findCorrectType(data, type);\n        if (data == undefined) {\n            return data;\n        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {\n            return data;\n        } else if (type.lastIndexOf(\"Array<\", 0) === 0) { // string.startsWith pre es6\n            let subType: string = type.replace(\"Array<\", \"\"); // Array<Type> => Type>\n            subType = subType.substring(0, subType.length - 1); // Type> => Type\n            let transformedData: any[] = [];\n            for (let index in data) {\n                let date = data[index];\n                transformedData.push(ObjectSerializer.deserialize(date, subType, format));\n            }\n            return transformedData;\n        } else if (type === \"Date\") {\n            return new Date(data);\n        } else {\n            if (enumsMap.has(type)) {// is Enum\n                return data;\n            }\n\n            if (!typeMap[type]) { // dont know the type\n                return data;\n            }\n            let instance = new typeMap[type]();\n            let attributeTypes = typeMap[type].getAttributeTypeMap();\n            for (let index in attributeTypes) {\n                let attributeType = attributeTypes[index];\n                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);\n                if (value !== undefined) {\n                    instance[attributeType.name] = value;\n                }\n            }\n            return instance;\n        }\n    }\n\n\n    /**\n     * Normalize media type\n     *\n     * We currently do not handle any media types attributes, i.e. anything\n     * after a semicolon. All content is assumed to be UTF-8 compatible.\n     */\n    public static normalizeMediaType(mediaType: string | undefined): string | undefined {\n        if (mediaType === undefined) {\n            return undefined;\n        }\n        return mediaType.split(\";\")[0].trim().toLowerCase();\n    }\n\n    /**\n     * From a list of possible media types, choose the one we can handle best.\n     *\n     * The order of the given media types does not have any impact on the choice\n     * made.\n     */\n    public static getPreferredMediaType(mediaTypes: Array<string>): string {\n        /** According to OAS 3 we should default to json */\n        if (!mediaTypes) {\n            return \"application/json\";\n        }\n\n        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);\n        let selectedMediaType: string | undefined = undefined;\n        let selectedRank: number = -Infinity;\n        for (const mediaType of normalMediaTypes) {\n            if (supportedMediaTypes[mediaType!] > selectedRank) {\n                selectedMediaType = mediaType;\n                selectedRank = supportedMediaTypes[mediaType!];\n            }\n        }\n\n        if (selectedMediaType === undefined) {\n            throw new Error(\"None of the given media types are supported: \" + mediaTypes.join(\", \"));\n        }\n\n        return selectedMediaType!;\n    }\n\n    /**\n     * Convert data to a string according the given media type\n     */\n    public static stringify(data: any, mediaType: string): string {\n        if (mediaType === \"application/json\") {\n            return JSON.stringify(data);\n        }\n\n        throw new Error(\"The mediaType \" + mediaType + \" is not supported by ObjectSerializer.stringify.\");\n    }\n\n    /**\n     * Parse data from a string according to the given media type\n     */\n    public static parse(rawData: string, mediaType: string | undefined) {\n        if (mediaType === undefined) {\n            throw new Error(\"Cannot parse content. No Content-Type defined.\");\n        }\n\n        if (mediaType === \"application/json\") {\n            return JSON.parse(rawData);\n        }\n\n        if (mediaType === \"text/html\") {\n            return rawData;\n        }\n\n        throw new Error(\"The mediaType \" + mediaType + \" is not supported by ObjectSerializer.parse.\");\n    }\n}\n","/**\n * Returns if a specific http code is in a given code range\n * where the code range is defined as a combination of digits\n * and \"X\" (the letter X) with a length of 3\n *\n * @param codeRange string with length 3 consisting of digits and \"X\" (the letter X)\n * @param code the http status code to be checked against the code range\n */\nexport function isCodeInRange(codeRange: string, code: number): boolean {\n    // This is how the default value is encoded in OAG\n    if (codeRange === \"0\") {\n        return true;\n    }\n    if (codeRange == code.toString()) {\n        return true;\n    } else {\n        const codeString = code.toString();\n        if (codeString.length != codeRange.length) {\n            return false;\n        }\n        for (let i = 0; i < codeString.length; i++) {\n            if (codeRange.charAt(i) != \"X\" && codeRange.charAt(i) != codeString.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n/**\n* Returns if it can consume form\n*\n* @param consumes array\n*/\nexport function canConsumeForm(contentTypes: string[]): boolean {\n    return contentTypes.indexOf('multipart/form-data') !== -1\n}\n","// TODO: better import syntax?\nimport {BaseAPIRequestFactory, RequiredError} from './baseapi';\nimport {Configuration} from '../configuration';\nimport {RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {canConsumeForm, isCodeInRange} from '../util';\nimport {SecurityAuthentication} from '../auth/auth';\n\n\nimport { AssetGate } from '../models/AssetGate';\nimport { AutoSuggestion } from '../models/AutoSuggestion';\nimport { BlockchainInfo } from '../models/BlockchainInfo';\nimport { Collection } from '../models/Collection';\nimport { CurrencyInfo } from '../models/CurrencyInfo';\nimport { ErrorMessage } from '../models/ErrorMessage';\nimport { SearchDocument } from '../models/SearchDocument';\nimport { Token } from '../models/Token';\nimport { TokenEvents } from '../models/TokenEvents';\nimport { Transaction } from '../models/Transaction';\nimport { Wallet } from '../models/Wallet';\n\n/**\n * no description\n */\nexport class DefaultApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Lists all supported blockchains.\n     */\n    public async getBlockchains(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/blockchains';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a collection by its contract address.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public async getCollection(contractAddress: string, chainID?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getCollection\", \"contractAddress\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/collections/{contractAddress}'\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Determine if a wallet has any token from a contract.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public async getContractGate(contractAddress: string, walletAddress: string, chainID?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getContractGate\", \"contractAddress\");\n        }\n\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getContractGate\", \"walletAddress\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/gate/{contractAddress}'\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)))\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get tokens by contract address.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getContractTokens(contractAddress: string, chainID?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getContractTokens\", \"contractAddress\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/tokens/{contractAddress}'\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns tokens from a batch lookup.\n     * @param contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n     * @param tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddresses' is not null or undefined\n        if (contractAddresses === null || contractAddresses === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getContractTokensByContractAndID\", \"contractAddresses\");\n        }\n\n\n        // verify required parameter 'tokenIdentifiers' is not null or undefined\n        if (tokenIdentifiers === null || tokenIdentifiers === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getContractTokensByContractAndID\", \"tokenIdentifiers\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/token-batch';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (contractAddresses !== undefined) {\n            requestContext.setQueryParam(\"contractAddresses\", ObjectSerializer.serialize(contractAddresses, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tokenIdentifiers !== undefined) {\n            requestContext.setQueryParam(\"tokenIdentifiers\", ObjectSerializer.serialize(tokenIdentifiers, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the transaction history for a collection\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param cursor Cursor to support API pagination.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getContractTransactionHistory\", \"contractAddress\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/collections/{contractAddress}/transactions/history'\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get search results such as wallets, tokens, and collections by a search query.\n     * @param query A search query that returns matching results\n     * @param cursor Cursor to support API pagination.\n     */\n    public async getSearchResults(query: string, cursor?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'query' is not null or undefined\n        if (query === null || query === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getSearchResults\", \"query\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/search/{query}'\n            .replace('{' + 'query' + '}', encodeURIComponent(String(query)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns a list of tokens sold by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getSoldTokens\", \"walletAddress\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/sold-tokens'\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get autocomplete-style search suggestions for results.\n     * @param query A query or partial query that can be used to retrieve suggested results. For example \\&quot;bored a\\&quot; would return a suggestion for \\&quot;bored ape.\\&quot;\n     */\n    public async getSuggestionsResults(query?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/suggestions';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (query !== undefined) {\n            requestContext.setQueryParam(\"query\", ObjectSerializer.serialize(query, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a token by its contract address and token ID.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public async getToken(contractAddress: string, tokenID: string, chainID?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getToken\", \"contractAddress\");\n        }\n\n\n        // verify required parameter 'tokenID' is not null or undefined\n        if (tokenID === null || tokenID === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getToken\", \"tokenID\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/tokens/{contractAddress}/{tokenID}'\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)))\n            .replace('{' + 'tokenID' + '}', encodeURIComponent(String(tokenID)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Determine if a wallet has a given token from a contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public async getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'tokenID' is not null or undefined\n        if (tokenID === null || tokenID === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getTokenGate\", \"tokenID\");\n        }\n\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getTokenGate\", \"contractAddress\");\n        }\n\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getTokenGate\", \"walletAddress\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/gate/{contractAddress}/{tokenID}'\n            .replace('{' + 'tokenID' + '}', encodeURIComponent(String(tokenID)))\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)))\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns a list of transfer transactions on a specified token.\n     * @param contractAddress A hex address for a blockchain contract.\n     * @param tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'contractAddress' is not null or undefined\n        if (contractAddress === null || contractAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getTokenTransfers\", \"contractAddress\");\n        }\n\n\n        // verify required parameter 'tokenID' is not null or undefined\n        if (tokenID === null || tokenID === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getTokenTransfers\", \"tokenID\");\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/tokens/{contractAddress}/{tokenID}/transfers'\n            .replace('{' + 'contractAddress' + '}', encodeURIComponent(String(contractAddress)))\n            .replace('{' + 'tokenID' + '}', encodeURIComponent(String(tokenID)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get tokens by a search query.\n     * @param query A search query that returns matching results\n     * @param cursor Cursor to support API pagination.\n     */\n    public async getTokensBySearchQuery(query: string, cursor?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'query' is not null or undefined\n        if (query === null || query === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getTokensBySearchQuery\", \"query\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/tokens/search/{query}'\n            .replace('{' + 'query' + '}', encodeURIComponent(String(query)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a wallet by a wallet address\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     */\n    public async getWallet(walletAddress: string, chainID?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getWallet\", \"walletAddress\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}'\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns a list of balances for tokens this wallet currently owns.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getWalletBalances(walletAddress: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getWalletBalances\", \"walletAddress\");\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/balances'\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns a list of tokens minted by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getWalletMints\", \"walletAddress\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/mints'\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns a list of tokens owned by a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param cursor Cursor to support API pagination.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param limit Limits the number of results in a single response.\n     */\n    public async getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getWalletTokens\", \"walletAddress\");\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/tokens'\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns transactions related to a wallet.\n     * @param walletAddress A hex string referencing a public wallet address.\n     * @param cursor Cursor to support API pagination.\n     * @param limit Limits the number of results in a single response.\n     * @param chainID An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param tokenType An indicator that be used to filter to only a subet of tokens, for example only NFTs. To select ERC-20, sidechain and L1 transactions, use the \\&quot;fungible.\\&quot; To select only NFTs or semi-fungible tokens (SFTs), use the respective enum.\n     */\n    public async getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'native' | 'fungible' | 'NFT' | 'SFT' | 'unknown', _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'walletAddress' is not null or undefined\n        if (walletAddress === null || walletAddress === undefined) {\n            throw new RequiredError(\"DefaultApi\", \"getWalletTransactions\", \"walletAddress\");\n        }\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/wallets/{walletAddress}/transactions/history'\n            .replace('{' + 'walletAddress' + '}', encodeURIComponent(String(walletAddress)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n\n        // Query Params\n        if (cursor !== undefined) {\n            requestContext.setQueryParam(\"cursor\", ObjectSerializer.serialize(cursor, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"\"));\n        }\n\n        // Query Params\n        if (chainID !== undefined) {\n            requestContext.setQueryParam(\"chainID\", ObjectSerializer.serialize(chainID, \"string\", \"\"));\n        }\n\n        // Query Params\n        if (tokenType !== undefined) {\n            requestContext.setQueryParam(\"tokenType\", ObjectSerializer.serialize(tokenType, \"'native' | 'fungible' | 'NFT' | 'SFT' | 'unknown'\", \"\"));\n        }\n\n\n        let authMethod: SecurityAuthentication | undefined;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"apikey\"]\n        if (authMethod?.applySecurityAuthentication) {\n            await authMethod?.applySecurityAuthentication(requestContext);\n        }\n        \n        const defaultAuth: SecurityAuthentication | undefined = _options?.authMethods?.default || this.configuration?.authMethods?.default\n        if (defaultAuth?.applySecurityAuthentication) {\n            await defaultAuth?.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class DefaultApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getBlockchains\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getBlockchains(response: ResponseContext): Promise<Array<BlockchainInfo> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<BlockchainInfo> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<BlockchainInfo>\", \"\"\n            ) as Array<BlockchainInfo>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<BlockchainInfo> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<BlockchainInfo>\", \"\"\n            ) as Array<BlockchainInfo>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getCollection\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getCollection(response: ResponseContext): Promise<Array<Collection> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Collection> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Collection>\", \"\"\n            ) as Array<Collection>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Collection> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Collection>\", \"\"\n            ) as Array<Collection>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getContractGate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getContractGate(response: ResponseContext): Promise<AssetGate > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AssetGate = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AssetGate\", \"\"\n            ) as AssetGate;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AssetGate = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AssetGate\", \"\"\n            ) as AssetGate;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getContractTokens\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getContractTokens(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getContractTokensByContractAndID\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getContractTokensByContractAndID(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getContractTransactionHistory\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getContractTransactionHistory(response: ResponseContext): Promise<Array<Transaction> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Transaction> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Transaction>\", \"\"\n            ) as Array<Transaction>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Transaction> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Transaction>\", \"\"\n            ) as Array<Transaction>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getSearchResults\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getSearchResults(response: ResponseContext): Promise<Array<SearchDocument> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<SearchDocument> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<SearchDocument>\", \"\"\n            ) as Array<SearchDocument>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<SearchDocument> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<SearchDocument>\", \"\"\n            ) as Array<SearchDocument>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getSoldTokens\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getSoldTokens(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getSuggestionsResults\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getSuggestionsResults(response: ResponseContext): Promise<Array<AutoSuggestion> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<AutoSuggestion> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<AutoSuggestion>\", \"\"\n            ) as Array<AutoSuggestion>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<AutoSuggestion> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<AutoSuggestion>\", \"\"\n            ) as Array<AutoSuggestion>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getToken(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getTokenGate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getTokenGate(response: ResponseContext): Promise<AssetGate > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AssetGate = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AssetGate\", \"\"\n            ) as AssetGate;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AssetGate = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AssetGate\", \"\"\n            ) as AssetGate;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getTokenTransfers\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getTokenTransfers(response: ResponseContext): Promise<TokenEvents > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TokenEvents = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TokenEvents\", \"\"\n            ) as TokenEvents;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TokenEvents = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TokenEvents\", \"\"\n            ) as TokenEvents;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getTokensBySearchQuery\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getTokensBySearchQuery(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getWallet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getWallet(response: ResponseContext): Promise<Array<Wallet> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Wallet> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Wallet>\", \"\"\n            ) as Array<Wallet>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Wallet> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Wallet>\", \"\"\n            ) as Array<Wallet>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getWalletBalances\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getWalletBalances(response: ResponseContext): Promise<Array<CurrencyInfo> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<CurrencyInfo> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<CurrencyInfo>\", \"\"\n            ) as Array<CurrencyInfo>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<CurrencyInfo> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<CurrencyInfo>\", \"\"\n            ) as Array<CurrencyInfo>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getWalletMints\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getWalletMints(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getWalletTokens\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getWalletTokens(response: ResponseContext): Promise<Array<Token> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Token> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Token>\", \"\"\n            ) as Array<Token>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getWalletTransactions\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getWalletTransactions(response: ResponseContext): Promise<Array<Transaction> > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: Array<Transaction> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Transaction>\", \"\"\n            ) as Array<Transaction>;\n            return body;\n        }\n        if (isCodeInRange(\"0\", response.httpStatusCode)) {\n            const body: ErrorMessage = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ErrorMessage\", \"\"\n            ) as ErrorMessage;\n            throw new ApiException<ErrorMessage>(response.httpStatusCode, \"An error message for unexpected requests.\", body, response.headers);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: Array<Transaction> = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"Array<Transaction>\", \"\"\n            ) as Array<Transaction>;\n            return body;\n        }\n\n        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, \"Unknown API Status Code!\", await response.getBodyAsAny(), response.headers);\n    }\n\n}\n"],"names":[],"version":3,"file":"index.js.map"}