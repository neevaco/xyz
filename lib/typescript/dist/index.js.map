{"mappings":"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","sources":["index.ts","api.ts","configuration.ts"],"sourcesContent":["// tslint:disable\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: joshua@n.xyz\n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n","/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: joshua@n.xyz\n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nimport * as url from \"url\";\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"https://api.n.xyz\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface BlockchainInfo\n */\nexport interface BlockchainInfo {\n    /**\n     * The name of a given chain. This is often a canonical name since a protocol may have multiple chains.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    name?: string;\n    /**\n     * The short-hand name for a given chain. Multiple chain's (e.g. mainnet and a testnet) may have the same name\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    shortName?: string;\n    /**\n     * A CAIP-2 compliant chain ID. This ID is designed to provide a unique identifier for a given chain.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    chainID?: string;\n    /**\n     * An ID used for a chain in a given ecosystem. This ID is not canonical and may collide with other chains. Do not use this value as a unique identifier.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    shortChainID?: string;\n}\n/**\n * \n * @export\n * @interface Collection\n */\nexport interface Collection {\n    /**\n     * \n     * @type {BlockchainInfo}\n     * @memberof Collection\n     */\n    blockchain: BlockchainInfo;\n    /**\n     * Address of the contract that minted this NFT\n     * @type {string}\n     * @memberof Collection\n     */\n    contractAddress: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    symbol?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    slug?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    shortDescription?: string;\n    /**\n     * Timestamp of creation of this contract in RFC 3339.\n     * @type {Date}\n     * @memberof Collection\n     */\n    createdDate?: Date;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof Collection\n     */\n    floorPrice?: CurrencyInfo;\n    /**\n     * \n     * @type {Media}\n     * @memberof Collection\n     */\n    bannerImage?: Media;\n    /**\n     * \n     * @type {Media}\n     * @memberof Collection\n     */\n    featuredImage?: Media;\n    /**\n     * \n     * @type {Array<URL>}\n     * @memberof Collection\n     */\n    urls?: Array<URL>;\n    /**\n     * \n     * @type {Array<SocialMedia>}\n     * @memberof Collection\n     */\n    socialMedia?: Array<SocialMedia>;\n}\n/**\n * \n * @export\n * @interface CurrencyInfo\n */\nexport interface CurrencyInfo {\n    /**\n     * Transaction value as a string-encoded bigint in the base unit for a given blockchain (e.g. wei for Ethereum) or fiat currency (e.g. US Dollars).\n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    value?: string;\n    /**\n     * Transaction value as a float representing the amount of tokens, e.g. 0.89 would be 89% of a token.\n     * @type {number}\n     * @memberof CurrencyInfo\n     */\n    tokenValue?: number;\n    /**\n     * The total value of this token in fiat currency.\n     * @type {Array<CurrencyInfo>}\n     * @memberof CurrencyInfo\n     */\n    fiat?: Array<CurrencyInfo>;\n    /**\n     * A formatted, human-friendly representation of the transaction value, e.g. the value in Ether, possibly with localized thousands separator and radix character.\n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    pretty?: string;\n    /**\n     * 10^decimals = 1 (e.g. WEI), e.g. 10^18 = 1 (e.g. ETH)\n     * @type {number}\n     * @memberof CurrencyInfo\n     */\n    decimals?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    symbol?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface ENS\n */\nexport interface ENS {\n    /**\n     * The ENS or domain name\n     * @type {string}\n     * @memberof ENS\n     */\n    name?: string;\n    /**\n     * The address the ENS record points to\n     * @type {string}\n     * @memberof ENS\n     */\n    pointsTo?: string;\n    /**\n     * Date the ENS registration explires\n     * @type {Date}\n     * @memberof ENS\n     */\n    expires?: Date;\n    /**\n     * A wallet address can have multiple ENS names. The primary ENS name represents a \\\"cross-platform web3 username and profile.\\\" A wallet address can only have one primary name, and it can change at any time.\n     * @type {boolean}\n     * @memberof ENS\n     */\n    isPrimary?: boolean;\n}\n/**\n * \n * @export\n * @interface ErrorMessage\n */\nexport interface ErrorMessage {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorMessage\n     */\n    error: string;\n}\n/**\n * \n * @export\n * @interface Media\n */\nexport interface Media {\n    /**\n     * \n     * @type {string}\n     * @memberof Media\n     */\n    key: string;\n    /**\n     * URI for the image asset\n     * @type {string}\n     * @memberof Media\n     */\n    URI?: string;\n    /**\n     * \n     * @type {Array<MediaVersion>}\n     * @memberof Media\n     */\n    version?: Array<MediaVersion>;\n}\n/**\n * \n * @export\n * @interface MediaVersion\n */\nexport interface MediaVersion {\n    /**\n     * \n     * @type {string}\n     * @memberof MediaVersion\n     */\n    kind?: MediaVersion.KindEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof MediaVersion\n     */\n    format?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    numBytes?: number;\n    /**\n     * If a video, length of video in ISO 8601 duration format.\n     * @type {string}\n     * @memberof MediaVersion\n     */\n    duration?: string;\n}\n\n/**\n * @export\n * @namespace MediaVersion\n */\nexport namespace MediaVersion {\n    /**\n     * @export\n     * @enum {string}\n     */\n    export enum KindEnum {\n        Video = <any> 'video',\n        Image = <any> 'image',\n        Raw = <any> 'raw',\n        Audio = <any> 'audio'\n    }\n}\n/**\n * \n * @export\n * @interface NonFungibleToken\n */\nexport interface NonFungibleToken {\n    /**\n     * ID of this particular token\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    tokenID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    contractTitle?: string;\n    /**\n     * A description of a contract may contain markup such as HTML or Markdown\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    description?: string;\n    /**\n     * \n     * @type {Media}\n     * @memberof NonFungibleToken\n     */\n    media?: Media;\n    /**\n     * \n     * @type {Wallet}\n     * @memberof NonFungibleToken\n     */\n    owner?: Wallet;\n    /**\n     * \n     * @type {Array<TokenAttribute>}\n     * @memberof NonFungibleToken\n     */\n    attributes?: Array<TokenAttribute>;\n    /**\n     * \n     * @type {Collection}\n     * @memberof NonFungibleToken\n     */\n    collection?: Collection;\n    /**\n     * \n     * @type {Transaction}\n     * @memberof NonFungibleToken\n     */\n    purchase?: Transaction;\n    /**\n     * A rough heuristic indicating the underlying technology and hypothetical durability of an asset. \\\"On-Chain\\\" assets store metadata and the asset media (e.g. SVG file, source code or MIDI) on a blockchain. \\\"Distributed\\\" assets are stored on decentralized protocols such as IPFS. \\\"Web\\\" assets are stored on services such as Amazon's S3. Each technology has different tradeoffs, in particular certain projects need more flexibility than is provided by on-chain data.\\\"\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    durability?: NonFungibleToken.DurabilityEnum;\n}\n\n/**\n * @export\n * @namespace NonFungibleToken\n */\nexport namespace NonFungibleToken {\n    /**\n     * @export\n     * @enum {string}\n     */\n    export enum DurabilityEnum {\n        OnChain = <any> 'On-Chain',\n        Decentralized = <any> 'Decentralized',\n        Web = <any> 'Web',\n        Unknown = <any> 'Unknown'\n    }\n}\n/**\n * \n * @export\n * @interface OwnedCollection\n */\nexport interface OwnedCollection {\n    /**\n     * A sample of the tokens owned by this wallet\n     * @type {Array<Token>}\n     * @memberof OwnedCollection\n     */\n    tokens?: Array<Token>;\n    /**\n     * \n     * @type {Collection}\n     * @memberof OwnedCollection\n     */\n    collection?: Collection;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof OwnedCollection\n     */\n    totalSpent?: CurrencyInfo;\n}\n/**\n * \n * @export\n * @interface SocialMedia\n */\nexport interface SocialMedia {\n    /**\n     * \n     * @type {string}\n     * @memberof SocialMedia\n     */\n    network?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SocialMedia\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface Token\n */\nexport interface Token {\n    /**\n     * \n     * @type {BlockchainInfo}\n     * @memberof Token\n     */\n    blockchain: BlockchainInfo;\n    /**\n     * Address of the contract that minted this NFT\n     * @type {string}\n     * @memberof Token\n     */\n    contractAddress: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    tokenStandard?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    symbol?: string;\n    /**\n     * \n     * @type {NonFungibleToken}\n     * @memberof Token\n     */\n    nft?: NonFungibleToken;\n}\n/**\n * \n * @export\n * @interface TokenAttribute\n */\nexport interface TokenAttribute {\n    /**\n     * The key or kind of trait\n     * @type {string}\n     * @memberof TokenAttribute\n     */\n    traitType?: string;\n    /**\n     * A distinct attribute belonging to a particular type of trait\n     * @type {string}\n     * @memberof TokenAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Transaction\n */\nexport interface Transaction {\n    /**\n     * Block number of the transaction\n     * @type {number}\n     * @memberof Transaction\n     */\n    blockNumber?: number;\n    /**\n     * Index of the transaction in the block\n     * @type {number}\n     * @memberof Transaction\n     */\n    transactionIndex?: number;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof Transaction\n     */\n    gasFee?: CurrencyInfo;\n    /**\n     * Timestamp of the transaction in RFC 3339.\n     * @type {Date}\n     * @memberof Transaction\n     */\n    timestamp?: Date;\n    /**\n     * Log lines related to the transaction\n     * @type {Array<TransactionLogLine>}\n     * @memberof Transaction\n     */\n    logLine?: Array<TransactionLogLine>;\n}\n/**\n * \n * @export\n * @interface TransactionLogLine\n */\nexport interface TransactionLogLine {\n    /**\n     * Index of the log in the transaction\n     * @type {number}\n     * @memberof TransactionLogLine\n     */\n    logIndex?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TransactionLogLine\n     */\n    fromAddress?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TransactionLogLine\n     */\n    toAddress?: string;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof TransactionLogLine\n     */\n    price?: CurrencyInfo;\n}\n/**\n * \n * @export\n * @interface URL\n */\nexport interface URL {\n    /**\n     * Human-readable name of the site, ideally simplified to a label that might appear on a business card\n     * @type {string}\n     * @memberof URL\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof URL\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface Wallet\n */\nexport interface Wallet {\n    /**\n     * The total balance in a fiat currency (e.g. USD) for the wallet.\n     * @type {Array<CurrencyInfo>}\n     * @memberof Wallet\n     */\n    totalBalance?: Array<CurrencyInfo>;\n    /**\n     * The balance of fungible tokens from smart contracts or blockchains.\n     * @type {Array<CurrencyInfo>}\n     * @memberof Wallet\n     */\n    balances?: Array<CurrencyInfo>;\n    /**\n     * \n     * @type {string}\n     * @memberof Wallet\n     */\n    address: string;\n    /**\n     * \n     * @type {Array<ENS>}\n     * @memberof Wallet\n     */\n    ens?: Array<ENS>;\n    /**\n     * \n     * @type {Array<SocialMedia>}\n     * @memberof Wallet\n     */\n    socialMedia?: Array<SocialMedia>;\n    /**\n     * A sample of the most recently transferred tokens owned by this wallet\n     * @type {Array<Token>}\n     * @memberof Wallet\n     */\n    recentTokens?: Array<Token>;\n    /**\n     * A sample of the most expensive tokens owned by this wallet\n     * @type {Array<Token>}\n     * @memberof Wallet\n     */\n    topTokens?: Array<Token>;\n    /**\n     * A sample of the collections this wallet owns.\n     * @type {Array<OwnedCollection>}\n     * @memberof Wallet\n     */\n    collections?: Array<OwnedCollection>;\n    /**\n     * A reverse-chronological list of the latest transactions for a wallet\n     * @type {Array<Transaction>}\n     * @memberof Wallet\n     */\n    history?: Array<Transaction>;\n}\n/**\n * DefaultApi - fetch parameter creator\n * @export\n */\nexport const DefaultApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Lists all supported blockchains\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1BlockchainsGet(options: any = {}): FetchArgs {\n            const localVarPath = `/api/v1/blockchains`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a collection by its contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsContractAddressGet(contractAddress: string, chainID?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'contractAddress' is not null or undefined\n            if (contractAddress === null || contractAddress === undefined) {\n                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1CollectionsContractAddressGet.');\n            }\n            const localVarPath = `/api/v1/collections/{contractAddress}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [page] The page number for a set of results. The first page is 0.\n         * @param {number} [limit] Limits the number of results in a single response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressGet(contractAddress: string, chainID?: string, page?: number, limit?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'contractAddress' is not null or undefined\n            if (contractAddress === null || contractAddress === undefined) {\n                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1TokensContractAddressGet.');\n            }\n            const localVarPath = `/api/v1/tokens/{contractAddress}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token id\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, chainID?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'contractAddress' is not null or undefined\n            if (contractAddress === null || contractAddress === undefined) {\n                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1TokensContractAddressTokenIDGet.');\n            }\n            // verify required parameter 'tokenID' is not null or undefined\n            if (tokenID === null || tokenID === undefined) {\n                throw new RequiredError('tokenID','Required parameter tokenID was null or undefined when calling apiV1TokensContractAddressTokenIDGet.');\n            }\n            const localVarPath = `/api/v1/tokens/{contractAddress}/{tokenID}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)))\n                .replace(`{${\"tokenID\"}}`, encodeURIComponent(String(tokenID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsWalletAddressGet(walletAddress: string, chainID?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'walletAddress' is not null or undefined\n            if (walletAddress === null || walletAddress === undefined) {\n                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling apiV1WalletsWalletAddressGet.');\n            }\n            const localVarPath = `/api/v1/wallets/{walletAddress}`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Lists all supported blockchains\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1BlockchainsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<BlockchainInfo>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1BlockchainsGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a collection by its contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsContractAddressGet(contractAddress: string, chainID?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Collection>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1CollectionsContractAddressGet(contractAddress, chainID, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [page] The page number for a set of results. The first page is 0.\n         * @param {number} [limit] Limits the number of results in a single response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressGet(contractAddress: string, chainID?: string, page?: number, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Token>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1TokensContractAddressGet(contractAddress, chainID, page, limit, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token id\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, chainID?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Token>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1TokensContractAddressTokenIDGet(contractAddress, tokenID, chainID, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsWalletAddressGet(walletAddress: string, chainID?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Wallet>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1WalletsWalletAddressGet(walletAddress, chainID, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @summary Lists all supported blockchains\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1BlockchainsGet(options?: any) {\n            return DefaultApiFp(configuration).apiV1BlockchainsGet(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a collection by its contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsContractAddressGet(contractAddress: string, chainID?: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1CollectionsContractAddressGet(contractAddress, chainID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get tokens by contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [page] The page number for a set of results. The first page is 0.\n         * @param {number} [limit] Limits the number of results in a single response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressGet(contractAddress: string, chainID?: string, page?: number, limit?: number, options?: any) {\n            return DefaultApiFp(configuration).apiV1TokensContractAddressGet(contractAddress, chainID, page, limit, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token id\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, chainID?: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1TokensContractAddressTokenIDGet(contractAddress, tokenID, chainID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsWalletAddressGet(walletAddress: string, chainID?: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1WalletsWalletAddressGet(walletAddress, chainID, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @summary Lists all supported blockchains\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1BlockchainsGet(options?: any) {\n        return DefaultApiFp(this.configuration).apiV1BlockchainsGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a collection by its contract address\n     * @param {string} contractAddress A hex address for a blockchain contract\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1CollectionsContractAddressGet(contractAddress: string, chainID?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1CollectionsContractAddressGet(contractAddress, chainID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get tokens by contract address\n     * @param {string} contractAddress A hex address for a blockchain contract\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {number} [page] The page number for a set of results. The first page is 0.\n     * @param {number} [limit] Limits the number of results in a single response\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1TokensContractAddressGet(contractAddress: string, chainID?: string, page?: number, limit?: number, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1TokensContractAddressGet(contractAddress, chainID, page, limit, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a token by its contract address and token id\n     * @param {string} contractAddress A hex address for a blockchain contract\n     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, chainID?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1TokensContractAddressTokenIDGet(contractAddress, tokenID, chainID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a wallet by a wallet address\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1WalletsWalletAddressGet(walletAddress: string, chainID?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1WalletsWalletAddressGet(walletAddress, chainID, options)(this.fetch, this.basePath);\n    }\n\n}\n","// tslint:disable\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.7.0\n * Contact: joshua@n.xyz\n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    basePath?: string;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n    }\n}\n"],"names":[],"version":3,"file":"index.js.map"}