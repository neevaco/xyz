{"mappings":"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","sources":["index.ts","api.ts","common.ts","base.ts","configuration.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * The version of the OpenAPI document: 0.17.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * The version of the OpenAPI document: 0.17.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface BlockchainInfo\n */\nexport interface BlockchainInfo {\n    /**\n     * The name of a given chain. This is often a canonical name since a protocol may have multiple chains.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    'name'?: string;\n    /**\n     * The short-hand name for a given chain. Multiple chains (e.g. mainnet and a testnet) may have the same name.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    'shortName'?: string;\n    /**\n     * A CAIP-2 compliant chain ID. This ID is designed to provide a unique identifier for a given chain.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    'chainID'?: string;\n    /**\n     * An ID used for a chain in a given ecosystem. This ID is not canonical and may collide with other chains. Do not use this value as a unique identifier.\n     * @type {string}\n     * @memberof BlockchainInfo\n     */\n    'shortChainID'?: string;\n}\n/**\n * \n * @export\n * @interface Collection\n */\nexport interface Collection {\n    /**\n     * \n     * @type {BlockchainInfo}\n     * @memberof Collection\n     */\n    'blockchain': BlockchainInfo;\n    /**\n     * Address of the contract that minted this NFT.\n     * @type {string}\n     * @memberof Collection\n     */\n    'contractAddress': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    'symbol'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    'slug'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    'shortDescription'?: string;\n    /**\n     * Timestamp of creation of this contract in RFC 3339.\n     * @type {string}\n     * @memberof Collection\n     */\n    'createdDate'?: string | null;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof Collection\n     */\n    'floorPrice'?: CurrencyInfo;\n    /**\n     * \n     * @type {Media}\n     * @memberof Collection\n     */\n    'bannerImage'?: Media;\n    /**\n     * \n     * @type {Media}\n     * @memberof Collection\n     */\n    'featuredImage'?: Media;\n    /**\n     * \n     * @type {Array<URL>}\n     * @memberof Collection\n     */\n    'urls'?: Array<URL>;\n    /**\n     * \n     * @type {Array<SocialMedia>}\n     * @memberof Collection\n     */\n    'socialMedia'?: Array<SocialMedia>;\n}\n/**\n * \n * @export\n * @interface CurrencyInfo\n */\nexport interface CurrencyInfo {\n    /**\n     * Transaction value as a string-encoded bigint in the base unit for a given blockchain (e.g. wei for Ethereum) or fiat currency (e.g. US Dollars).\n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    'value'?: string;\n    /**\n     * Transaction value as a float representing the amount of tokens, e.g. 0.89 would be 89% of a token.\n     * @type {number}\n     * @memberof CurrencyInfo\n     */\n    'tokenValue'?: number;\n    /**\n     * The total value of this token in fiat currency.\n     * @type {Array<CurrencyInfo>}\n     * @memberof CurrencyInfo\n     */\n    'fiat'?: Array<CurrencyInfo>;\n    /**\n     * A formatted, human-friendly representation of the transaction value, e.g. the value in Ether, possibly with localized thousands separator and radix character.\n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    'pretty'?: string;\n    /**\n     * The base value for a given token. For Ethereum this would be 18. This would yield an equation such as 890000000000000000wei / 10^18 = 0.89 ETH.\n     * @type {number}\n     * @memberof CurrencyInfo\n     */\n    'decimals'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    'symbol'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    'contractAddress'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    'name'?: string;\n}\n/**\n * \n * @export\n * @interface ENS\n */\nexport interface ENS {\n    /**\n     * The ENS or domain name.\n     * @type {string}\n     * @memberof ENS\n     */\n    'name'?: string;\n    /**\n     * The address the ENS record points to.\n     * @type {string}\n     * @memberof ENS\n     */\n    'pointsTo'?: string;\n    /**\n     * Date the ENS registration expires.\n     * @type {string}\n     * @memberof ENS\n     */\n    'expires'?: string | null;\n    /**\n     * A wallet address can have multiple ENS records. The primary ENS name represents a \\\"cross-platform web3 username and profile.\\\" A wallet address can only have one primary name, and it can change at any time.\n     * @type {boolean}\n     * @memberof ENS\n     */\n    'isPrimary'?: boolean;\n}\n/**\n * \n * @export\n * @interface ErrorMessage\n */\nexport interface ErrorMessage {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorMessage\n     */\n    'error': string;\n}\n/**\n * \n * @export\n * @interface Media\n */\nexport interface Media {\n    /**\n     * \n     * @type {string}\n     * @memberof Media\n     */\n    'key': string;\n    /**\n     * URI for the image asset.\n     * @type {string}\n     * @memberof Media\n     */\n    'URI'?: string;\n    /**\n     * \n     * @type {Array<MediaVersion>}\n     * @memberof Media\n     */\n    'version'?: Array<MediaVersion>;\n}\n/**\n * \n * @export\n * @interface MediaPreview\n */\nexport interface MediaPreview {\n    /**\n     * URI for the image asset.\n     * @type {string}\n     * @memberof MediaPreview\n     */\n    'URI'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MediaPreview\n     */\n    'kind'?: MediaPreviewKindEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof MediaPreview\n     */\n    'format'?: string;\n    /**\n     * The image\\'s approximate height in pixels.\n     * @type {number}\n     * @memberof MediaPreview\n     */\n    'height'?: number;\n    /**\n     * The image\\'s approximate width in pixels.\n     * @type {number}\n     * @memberof MediaPreview\n     */\n    'width'?: number;\n    /**\n     * If a video, length of video in ISO 8601 duration format.\n     * @type {string}\n     * @memberof MediaPreview\n     */\n    'duration'?: string;\n}\n\nexport const MediaPreviewKindEnum = {\n    Video: 'video',\n    Image: 'image',\n    Raw: 'raw',\n    Audio: 'audio'\n} as const;\n\nexport type MediaPreviewKindEnum = typeof MediaPreviewKindEnum[keyof typeof MediaPreviewKindEnum];\n\n/**\n * \n * @export\n * @interface MediaVersion\n */\nexport interface MediaVersion {\n    /**\n     * \n     * @type {string}\n     * @memberof MediaVersion\n     */\n    'kind'?: MediaVersionKindEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof MediaVersion\n     */\n    'format'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    'width'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    'height'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    'numBytes'?: number;\n    /**\n     * If a video, length of video in ISO 8601 duration format.\n     * @type {string}\n     * @memberof MediaVersion\n     */\n    'duration'?: string;\n}\n\nexport const MediaVersionKindEnum = {\n    Video: 'video',\n    Image: 'image',\n    Raw: 'raw',\n    Audio: 'audio'\n} as const;\n\nexport type MediaVersionKindEnum = typeof MediaVersionKindEnum[keyof typeof MediaVersionKindEnum];\n\n/**\n * \n * @export\n * @interface NonFungibleToken\n */\nexport interface NonFungibleToken {\n    /**\n     * ID of this particular token.\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    'tokenID': string;\n    /**\n     * \n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    'title'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    'contractTitle'?: string;\n    /**\n     * A description of a contract may contain markup such as HTML or Markdown.\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    'description'?: string;\n    /**\n     * \n     * @type {Media}\n     * @memberof NonFungibleToken\n     */\n    'media'?: Media;\n    /**\n     * Transformed media assets that are resized and transcoded in to friendlier formats for web and mobile delivery.\n     * @type {Array<MediaPreview>}\n     * @memberof NonFungibleToken\n     */\n    'previews'?: Array<MediaPreview>;\n    /**\n     * \n     * @type {Wallet}\n     * @memberof NonFungibleToken\n     */\n    'owner'?: Wallet;\n    /**\n     * \n     * @type {Array<TokenAttribute>}\n     * @memberof NonFungibleToken\n     */\n    'attributes'?: Array<TokenAttribute>;\n    /**\n     * \n     * @type {Collection}\n     * @memberof NonFungibleToken\n     */\n    'collection'?: Collection;\n    /**\n     * \n     * @type {Transaction}\n     * @memberof NonFungibleToken\n     */\n    'purchase'?: Transaction;\n    /**\n     * A rough heuristic indicating the underlying technology and hypothetical durability of an asset. \\\"On-Chain\\\" assets store metadata and the asset media (e.g. SVG file, source code or MIDI) on a blockchain. \\\"Distributed\\\" assets are stored on decentralized protocols such as IPFS. \\\"Web\\\" assets are stored on services such as Amazon\\'s S3. Each technology has different tradeoffs, in particular certain projects need more flexibility than is provided by on-chain data.\\\"\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    'durability'?: NonFungibleTokenDurabilityEnum;\n    /**\n     * The project name of the NFT.\n     * @type {string}\n     * @memberof NonFungibleToken\n     */\n    'projectName'?: string;\n}\n\nexport const NonFungibleTokenDurabilityEnum = {\n    OnChain: 'On-Chain',\n    Decentralized: 'Decentralized',\n    Web: 'Web',\n    Unknown: 'Unknown'\n} as const;\n\nexport type NonFungibleTokenDurabilityEnum = typeof NonFungibleTokenDurabilityEnum[keyof typeof NonFungibleTokenDurabilityEnum];\n\n/**\n * \n * @export\n * @interface OpenSeaContract\n */\nexport interface OpenSeaContract {\n    /**\n     * The type of contract.\n     * @type {string}\n     * @memberof OpenSeaContract\n     */\n    'assetContractType'?: OpenSeaContractAssetContractTypeEnum;\n    /**\n     * The NFT Version\n     * @type {string}\n     * @memberof OpenSeaContract\n     */\n    'nftVersion'?: string;\n    /**\n     * The OpenSea Version\n     * @type {string}\n     * @memberof OpenSeaContract\n     */\n    'openSeaVersion'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof OpenSeaContract\n     */\n    'defaultToFiat'?: boolean;\n    /**\n     * Total fee levied on buyers by this contract, in basis points\n     * @type {number}\n     * @memberof OpenSeaContract\n     */\n    'buyerFeeBasisPoints'?: number;\n    /**\n     * Total fee levied on sellers by this contract, in basis points\n     * @type {number}\n     * @memberof OpenSeaContract\n     */\n    'sellerFeeBasisPoints'?: number;\n}\n\nexport const OpenSeaContractAssetContractTypeEnum = {\n    Nft: 'NFT',\n    Sft: 'SFT',\n    Unknown: 'unknown'\n} as const;\n\nexport type OpenSeaContractAssetContractTypeEnum = typeof OpenSeaContractAssetContractTypeEnum[keyof typeof OpenSeaContractAssetContractTypeEnum];\n\n/**\n * \n * @export\n * @interface OwnedCollection\n */\nexport interface OwnedCollection {\n    /**\n     * A sample of the tokens owned by this wallet.\n     * @type {Array<Token>}\n     * @memberof OwnedCollection\n     */\n    'tokens'?: Array<Token>;\n    /**\n     * \n     * @type {Collection}\n     * @memberof OwnedCollection\n     */\n    'collection'?: Collection;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof OwnedCollection\n     */\n    'totalSpent'?: CurrencyInfo;\n}\n/**\n * \n * @export\n * @interface SearchDocument\n */\nexport interface SearchDocument {\n    /**\n     * \n     * @type {Token}\n     * @memberof SearchDocument\n     */\n    'token'?: Token;\n    /**\n     * \n     * @type {Wallet}\n     * @memberof SearchDocument\n     */\n    'wallet'?: Wallet;\n    /**\n     * \n     * @type {Collection}\n     * @memberof SearchDocument\n     */\n    'collection'?: Collection;\n}\n/**\n * \n * @export\n * @interface SocialMedia\n */\nexport interface SocialMedia {\n    /**\n     * \n     * @type {string}\n     * @memberof SocialMedia\n     */\n    'network'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SocialMedia\n     */\n    'username'?: string;\n}\n/**\n * \n * @export\n * @interface Token\n */\nexport interface Token {\n    /**\n     * \n     * @type {BlockchainInfo}\n     * @memberof Token\n     */\n    'blockchain': BlockchainInfo;\n    /**\n     * Address of the contract that minted this NFT.\n     * @type {string}\n     * @memberof Token\n     */\n    'contractAddress': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    'tokenStandard'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    'symbol'?: string;\n    /**\n     * \n     * @type {NonFungibleToken}\n     * @memberof Token\n     */\n    'nft'?: NonFungibleToken;\n    /**\n     * \n     * @type {OpenSeaContract}\n     * @memberof Token\n     */\n    'openSeaContract'?: OpenSeaContract;\n}\n/**\n * \n * @export\n * @interface TokenAttribute\n */\nexport interface TokenAttribute {\n    /**\n     * The key or kind of trait.\n     * @type {string}\n     * @memberof TokenAttribute\n     */\n    'traitType'?: string;\n    /**\n     * A distinct attribute belonging to a particular type of trait.\n     * @type {string}\n     * @memberof TokenAttribute\n     */\n    'value'?: string;\n}\n/**\n * \n * @export\n * @interface TokenEvents\n */\nexport interface TokenEvents {\n    /**\n     * Metadata for the token specified in the request.\n     * @type {Array<Token>}\n     * @memberof TokenEvents\n     */\n    'token'?: Array<Token>;\n    /**\n     * A list of the events for a token.\n     * @type {Array<Transaction>}\n     * @memberof TokenEvents\n     */\n    'events'?: Array<Transaction>;\n}\n/**\n * \n * @export\n * @interface TokenGate\n */\nexport interface TokenGate {\n    /**\n     * \n     * @type {boolean}\n     * @memberof TokenGate\n     */\n    'hasToken': boolean;\n}\n/**\n * \n * @export\n * @interface Transaction\n */\nexport interface Transaction {\n    /**\n     * Block number of the transaction.\n     * @type {number}\n     * @memberof Transaction\n     */\n    'blockNumber'?: number;\n    /**\n     * Index of the transaction in the block.\n     * @type {number}\n     * @memberof Transaction\n     */\n    'transactionIndex'?: number;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof Transaction\n     */\n    'gasFee'?: CurrencyInfo;\n    /**\n     * Timestamp of the transaction in RFC 3339.\n     * @type {string}\n     * @memberof Transaction\n     */\n    'timestamp'?: string | null;\n    /**\n     * Log lines related to the transaction.\n     * @type {Array<TransactionLogLine>}\n     * @memberof Transaction\n     */\n    'logLine'?: Array<TransactionLogLine>;\n}\n/**\n * \n * @export\n * @interface TransactionLogLine\n */\nexport interface TransactionLogLine {\n    /**\n     * When the value is true, it indicates that a token has been burned, and this transaction corresponds to the burn.\n     * @type {boolean}\n     * @memberof TransactionLogLine\n     */\n    'burned'?: boolean | null;\n    /**\n     * When the value is true, it indicates this is the transaction representing a token minting.\n     * @type {boolean}\n     * @memberof TransactionLogLine\n     */\n    'mint'?: boolean | null;\n    /**\n     * Index of the log in the transaction.\n     * @type {number}\n     * @memberof TransactionLogLine\n     */\n    'logIndex'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TransactionLogLine\n     */\n    'fromAddress'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TransactionLogLine\n     */\n    'toAddress'?: string;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof TransactionLogLine\n     */\n    'price'?: CurrencyInfo;\n}\n/**\n * \n * @export\n * @interface URL\n */\nexport interface URL {\n    /**\n     * Human-readable name of the site.\n     * @type {string}\n     * @memberof URL\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof URL\n     */\n    'url'?: string;\n}\n/**\n * \n * @export\n * @interface Wallet\n */\nexport interface Wallet {\n    /**\n     * The total balance in a fiat currency (e.g. USD) for the wallet.\n     * @type {Array<CurrencyInfo>}\n     * @memberof Wallet\n     */\n    'totalBalance'?: Array<CurrencyInfo>;\n    /**\n     * The balance of fungible tokens from smart contracts or blockchains. Certain non-standard ERC-20 tokens (e.g. stETH) may occasionally have stale balances, for example interest payments can be slow to update.\n     * @type {Array<CurrencyInfo>}\n     * @memberof Wallet\n     */\n    'balances'?: Array<CurrencyInfo>;\n    /**\n     * \n     * @type {string}\n     * @memberof Wallet\n     */\n    'address': string;\n    /**\n     * \n     * @type {Array<ENS>}\n     * @memberof Wallet\n     */\n    'ens'?: Array<ENS>;\n    /**\n     * \n     * @type {Array<SocialMedia>}\n     * @memberof Wallet\n     */\n    'socialMedia'?: Array<SocialMedia>;\n    /**\n     * A sample of the most recently transferred tokens owned by this wallet.\n     * @type {Array<Token>}\n     * @memberof Wallet\n     */\n    'recentTokens'?: Array<Token>;\n    /**\n     * A sample of the most expensive tokens owned by this wallet.\n     * @type {Array<Token>}\n     * @memberof Wallet\n     */\n    'topTokens'?: Array<Token>;\n    /**\n     * A sample of the collections this wallet owns.\n     * @type {Array<OwnedCollection>}\n     * @memberof Wallet\n     */\n    'collections'?: Array<OwnedCollection>;\n    /**\n     * A reverse-chronological list of the latest transactions for a wallet.\n     * @type {Array<Transaction>}\n     * @memberof Wallet\n     */\n    'history'?: Array<Transaction>;\n}\n\n/**\n * AlphaApi - axios parameter creator\n * @export\n */\nexport const AlphaApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTopCollections: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1-alpha/collections/top`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTopTokens: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1-alpha/tokens/top`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTopWallets: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1-alpha/wallets/top`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AlphaApi - functional programming interface\n * @export\n */\nexport const AlphaApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AlphaApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTopCollections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collection>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopCollections(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTopTokens(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopTokens(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTopWallets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wallet>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopWallets(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AlphaApi - factory interface\n * @export\n */\nexport const AlphaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AlphaApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTopCollections(options?: any): AxiosPromise<Array<Collection>> {\n            return localVarFp.getTopCollections(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTopTokens(options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getTopTokens(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTopWallets(options?: any): AxiosPromise<Array<Wallet>> {\n            return localVarFp.getTopWallets(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AlphaApi - object-oriented interface\n * @export\n * @class AlphaApi\n * @extends {BaseAPI}\n */\nexport class AlphaApi extends BaseAPI {\n    /**\n     * \n     * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlphaApi\n     */\n    public getTopCollections(options?: AxiosRequestConfig) {\n        return AlphaApiFp(this.configuration).getTopCollections(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlphaApi\n     */\n    public getTopTokens(options?: AxiosRequestConfig) {\n        return AlphaApiFp(this.configuration).getTopTokens(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlphaApi\n     */\n    public getTopWallets(options?: AxiosRequestConfig) {\n        return AlphaApiFp(this.configuration).getTopWallets(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Lists all supported blockchains.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBlockchains: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/blockchains`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a collection by its contract address.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCollection: async (contractAddress: string, chainID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'contractAddress' is not null or undefined\n            assertParamExists('getCollection', 'contractAddress', contractAddress)\n            const localVarPath = `/api/v1/collections/{contractAddress}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by contract address.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractTokens: async (contractAddress: string, chainID?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'contractAddress' is not null or undefined\n            assertParamExists('getContractTokens', 'contractAddress', contractAddress)\n            const localVarPath = `/api/v1/tokens/{contractAddress}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \\\"goblintown\\\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).\n         * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n         * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractTokensByContractAndID: async (contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'contractAddresses' is not null or undefined\n            assertParamExists('getContractTokensByContractAndID', 'contractAddresses', contractAddresses)\n            // verify required parameter 'tokenIdentifiers' is not null or undefined\n            assertParamExists('getContractTokensByContractAndID', 'tokenIdentifiers', tokenIdentifiers)\n            const localVarPath = `/api/v1/token-batch`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (contractAddresses !== undefined) {\n                localVarQueryParameter['contractAddresses'] = contractAddresses;\n            }\n\n            if (tokenIdentifiers !== undefined) {\n                localVarQueryParameter['tokenIdentifiers'] = tokenIdentifiers;\n            }\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get the transaction history for a collection\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractTransactionHistory: async (contractAddress: string, cursor?: string, chainID?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'contractAddress' is not null or undefined\n            assertParamExists('getContractTransactionHistory', 'contractAddress', contractAddress)\n            const localVarPath = `/api/v1/collections/{contractAddress}/transactions/history`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get search results such as wallets, tokens, and collections by a search query.\n         * @param {string} query A search query that returns matching results\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSearchResults: async (query: string, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'query' is not null or undefined\n            assertParamExists('getSearchResults', 'query', query)\n            const localVarPath = `/api/v1/search/{query}`\n                .replace(`{${\"query\"}}`, encodeURIComponent(String(query)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of tokens sold by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSoldTokens: async (walletAddress: string, chainID?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getSoldTokens', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}/sold-tokens`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token ID.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getToken: async (contractAddress: string, tokenID: string, chainID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'contractAddress' is not null or undefined\n            assertParamExists('getToken', 'contractAddress', contractAddress)\n            // verify required parameter 'tokenID' is not null or undefined\n            assertParamExists('getToken', 'tokenID', tokenID)\n            const localVarPath = `/api/v1/tokens/{contractAddress}/{tokenID}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)))\n                .replace(`{${\"tokenID\"}}`, encodeURIComponent(String(tokenID)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Determine if a wallet has a given token from a contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTokenGate: async (tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tokenID' is not null or undefined\n            assertParamExists('getTokenGate', 'tokenID', tokenID)\n            // verify required parameter 'contractAddress' is not null or undefined\n            assertParamExists('getTokenGate', 'contractAddress', contractAddress)\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getTokenGate', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}/gate/{contractAddress}/{tokenID}`\n                .replace(`{${\"tokenID\"}}`, encodeURIComponent(String(tokenID)))\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)))\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of transfer transactions on a specified token.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTokenTransfers: async (contractAddress: string, tokenID: string, chainID?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'contractAddress' is not null or undefined\n            assertParamExists('getTokenTransfers', 'contractAddress', contractAddress)\n            // verify required parameter 'tokenID' is not null or undefined\n            assertParamExists('getTokenTransfers', 'tokenID', tokenID)\n            const localVarPath = `/api/v1/tokens/{contractAddress}/{tokenID}/transfers`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)))\n                .replace(`{${\"tokenID\"}}`, encodeURIComponent(String(tokenID)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by a search query.\n         * @param {string} query A search query that returns matching results\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTokensBySearchQuery: async (query: string, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'query' is not null or undefined\n            assertParamExists('getTokensBySearchQuery', 'query', query)\n            const localVarPath = `/api/v1/tokens/search/{query}`\n                .replace(`{${\"query\"}}`, encodeURIComponent(String(query)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWallet: async (walletAddress: string, chainID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getWallet', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of balances for tokens this wallet currently owns.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletBalances: async (walletAddress: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getWalletBalances', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}/balances`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of tokens minted by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletMints: async (walletAddress: string, chainID?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getWalletMints', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}/mints`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of tokens owned by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletTokens: async (walletAddress: string, cursor?: string, chainID?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getWalletTokens', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}/tokens`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletTransactions: async (walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'walletAddress' is not null or undefined\n            assertParamExists('getWalletTransactions', 'walletAddress', walletAddress)\n            const localVarPath = `/api/v1/wallets/{walletAddress}/transactions/history`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication apikey required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (chainID !== undefined) {\n                localVarQueryParameter['chainID'] = chainID;\n            }\n\n            if (tokenType !== undefined) {\n                localVarQueryParameter['tokenType'] = tokenType;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Lists all supported blockchains.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getBlockchains(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockchainInfo>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockchains(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a collection by its contract address.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getCollection(contractAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collection>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollection(contractAddress, chainID, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get tokens by contract address.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getContractTokens(contractAddress: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractTokens(contractAddress, chainID, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \\\"goblintown\\\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).\n         * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n         * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractTokensByContractAndID(contractAddresses, tokenIdentifiers, chainID, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get the transaction history for a collection\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractTransactionHistory(contractAddress, cursor, chainID, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get search results such as wallets, tokens, and collections by a search query.\n         * @param {string} query A search query that returns matching results\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSearchResults(query: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchDocument>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchResults(query, cursor, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of tokens sold by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSoldTokens(walletAddress, chainID, cursor, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token ID.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getToken(contractAddress: string, tokenID: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getToken(contractAddress, tokenID, chainID, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Determine if a wallet has a given token from a contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenGate>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenGate(tokenID, contractAddress, walletAddress, chainID, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of transfer transactions on a specified token.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenEvents>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenTransfers(contractAddress, tokenID, chainID, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get tokens by a search query.\n         * @param {string} query A search query that returns matching results\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTokensBySearchQuery(query: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokensBySearchQuery(query, cursor, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWallet(walletAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wallet>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWallet(walletAddress, chainID, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of balances for tokens this wallet currently owns.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWalletBalances(walletAddress: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrencyInfo>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletBalances(walletAddress, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of tokens minted by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletMints(walletAddress, chainID, cursor, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of tokens owned by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletTokens(walletAddress, cursor, chainID, limit, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletTransactions(walletAddress, cursor, limit, chainID, tokenType, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Lists all supported blockchains.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getBlockchains(options?: any): AxiosPromise<Array<BlockchainInfo>> {\n            return localVarFp.getBlockchains(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a collection by its contract address.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCollection(contractAddress: string, chainID?: string, options?: any): AxiosPromise<Array<Collection>> {\n            return localVarFp.getCollection(contractAddress, chainID, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get tokens by contract address.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractTokens(contractAddress: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getContractTokens(contractAddress, chainID, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \\\"goblintown\\\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).\n         * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n         * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getContractTokensByContractAndID(contractAddresses, tokenIdentifiers, chainID, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get the transaction history for a collection\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Transaction>> {\n            return localVarFp.getContractTransactionHistory(contractAddress, cursor, chainID, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get search results such as wallets, tokens, and collections by a search query.\n         * @param {string} query A search query that returns matching results\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSearchResults(query: string, cursor?: string, options?: any): AxiosPromise<Array<SearchDocument>> {\n            return localVarFp.getSearchResults(query, cursor, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of tokens sold by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getSoldTokens(walletAddress, chainID, cursor, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token ID.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getToken(contractAddress: string, tokenID: string, chainID?: string, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getToken(contractAddress, tokenID, chainID, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Determine if a wallet has a given token from a contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: any): AxiosPromise<TokenGate> {\n            return localVarFp.getTokenGate(tokenID, contractAddress, walletAddress, chainID, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of transfer transactions on a specified token.\n         * @param {string} contractAddress A hex address for a blockchain contract.\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: any): AxiosPromise<TokenEvents> {\n            return localVarFp.getTokenTransfers(contractAddress, tokenID, chainID, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get tokens by a search query.\n         * @param {string} query A search query that returns matching results\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTokensBySearchQuery(query: string, cursor?: string, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getTokensBySearchQuery(query, cursor, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWallet(walletAddress: string, chainID?: string, options?: any): AxiosPromise<Array<Wallet>> {\n            return localVarFp.getWallet(walletAddress, chainID, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of balances for tokens this wallet currently owns.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletBalances(walletAddress: string, limit?: number, options?: any): AxiosPromise<Array<CurrencyInfo>> {\n            return localVarFp.getWalletBalances(walletAddress, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of tokens minted by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getWalletMints(walletAddress, chainID, cursor, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of tokens owned by a wallet.\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Token>> {\n            return localVarFp.getWalletTokens(walletAddress, cursor, chainID, limit, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {string} [cursor] Cursor to support API pagination.\n         * @param {number} [limit] Limits the number of results in a single response.\n         * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n         * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: any): AxiosPromise<Array<Transaction>> {\n            return localVarFp.getWalletTransactions(walletAddress, cursor, limit, chainID, tokenType, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @summary Lists all supported blockchains.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getBlockchains(options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getBlockchains(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a collection by its contract address.\n     * @param {string} contractAddress A hex address for a blockchain contract.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getCollection(contractAddress: string, chainID?: string, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getCollection(contractAddress, chainID, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get tokens by contract address.\n     * @param {string} contractAddress A hex address for a blockchain contract.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getContractTokens(contractAddress: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getContractTokens(contractAddress, chainID, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \\\"goblintown\\\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).\n     * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.\n     * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getContractTokensByContractAndID(contractAddresses, tokenIdentifiers, chainID, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get the transaction history for a collection\n     * @param {string} contractAddress A hex address for a blockchain contract.\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getContractTransactionHistory(contractAddress, cursor, chainID, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get search results such as wallets, tokens, and collections by a search query.\n     * @param {string} query A search query that returns matching results\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getSearchResults(query: string, cursor?: string, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getSearchResults(query, cursor, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of tokens sold by a wallet.\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getSoldTokens(walletAddress, chainID, cursor, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a token by its contract address and token ID.\n     * @param {string} contractAddress A hex address for a blockchain contract.\n     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getToken(contractAddress: string, tokenID: string, chainID?: string, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getToken(contractAddress, tokenID, chainID, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Determine if a wallet has a given token from a contract.\n     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param {string} contractAddress A hex address for a blockchain contract.\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getTokenGate(tokenID, contractAddress, walletAddress, chainID, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of transfer transactions on a specified token.\n     * @param {string} contractAddress A hex address for a blockchain contract.\n     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getTokenTransfers(contractAddress, tokenID, chainID, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get tokens by a search query.\n     * @param {string} query A search query that returns matching results\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTokensBySearchQuery(query: string, cursor?: string, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getTokensBySearchQuery(query, cursor, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a wallet by a wallet address\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWallet(walletAddress: string, chainID?: string, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWallet(walletAddress, chainID, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of balances for tokens this wallet currently owns.\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWalletBalances(walletAddress: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWalletBalances(walletAddress, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of tokens minted by a wallet.\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWalletMints(walletAddress, chainID, cursor, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of tokens owned by a wallet.\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWalletTokens(walletAddress, cursor, chainID, limit, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {string} [cursor] Cursor to support API pagination.\n     * @param {number} [limit] Limits the number of results in a single response.\n     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \\&quot;ethereum\\&quot; or \\&quot;polygon\\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.\n     * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getWalletTransactions(walletAddress, cursor, limit, chainID, tokenType, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * The version of the OpenAPI document: 0.17.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * The version of the OpenAPI document: 0.17.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"https://api.n.xyz\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * n.xyz REST API\n * REST API for blockchain data.\n *\n * The version of the OpenAPI document: 0.17.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n"],"names":[],"version":3,"file":"index.js.map"}