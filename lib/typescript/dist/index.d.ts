import { AxiosInstance, AxiosRequestConfig, AxiosPromise } from "axios";
/**
 * n.xyz REST API
 * REST API for blockchain data.
 *
 * The version of the OpenAPI document: 0.17.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}
export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}
/**
 *
 * @export
 * @interface RequestArgs
 */
interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}
/**
 *
 * @export
 * @class BaseAPI
 */
declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}
/**
 *
 * @export
 * @interface BlockchainInfo
 */
export interface BlockchainInfo {
    /**
     * The name of a given chain. This is often a canonical name since a protocol may have multiple chains.
     * @type {string}
     * @memberof BlockchainInfo
     */
    'name'?: string;
    /**
     * The short-hand name for a given chain. Multiple chains (e.g. mainnet and a testnet) may have the same name.
     * @type {string}
     * @memberof BlockchainInfo
     */
    'shortName'?: string;
    /**
     * A CAIP-2 compliant chain ID. This ID is designed to provide a unique identifier for a given chain.
     * @type {string}
     * @memberof BlockchainInfo
     */
    'chainID'?: string;
    /**
     * An ID used for a chain in a given ecosystem. This ID is not canonical and may collide with other chains. Do not use this value as a unique identifier.
     * @type {string}
     * @memberof BlockchainInfo
     */
    'shortChainID'?: string;
}
/**
 *
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     *
     * @type {BlockchainInfo}
     * @memberof Collection
     */
    'blockchain': BlockchainInfo;
    /**
     * Address of the contract that minted this NFT.
     * @type {string}
     * @memberof Collection
     */
    'contractAddress': string;
    /**
     *
     * @type {string}
     * @memberof Collection
     */
    'symbol'?: string;
    /**
     *
     * @type {string}
     * @memberof Collection
     */
    'slug'?: string;
    /**
     *
     * @type {string}
     * @memberof Collection
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Collection
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof Collection
     */
    'shortDescription'?: string;
    /**
     * Timestamp of creation of this contract in RFC 3339.
     * @type {string}
     * @memberof Collection
     */
    'createdDate'?: string | null;
    /**
     *
     * @type {CurrencyInfo}
     * @memberof Collection
     */
    'floorPrice'?: CurrencyInfo;
    /**
     *
     * @type {Media}
     * @memberof Collection
     */
    'bannerImage'?: Media;
    /**
     *
     * @type {Media}
     * @memberof Collection
     */
    'featuredImage'?: Media;
    /**
     *
     * @type {Array<URL>}
     * @memberof Collection
     */
    'urls'?: Array<URL>;
    /**
     *
     * @type {Array<SocialMedia>}
     * @memberof Collection
     */
    'socialMedia'?: Array<SocialMedia>;
}
/**
 *
 * @export
 * @interface CurrencyInfo
 */
export interface CurrencyInfo {
    /**
     * Transaction value as a string-encoded bigint in the base unit for a given blockchain (e.g. wei for Ethereum) or fiat currency (e.g. US Dollars).
     * @type {string}
     * @memberof CurrencyInfo
     */
    'value'?: string;
    /**
     * Transaction value as a float representing the amount of tokens, e.g. 0.89 would be 89% of a token.
     * @type {number}
     * @memberof CurrencyInfo
     */
    'tokenValue'?: number;
    /**
     * The total value of this token in fiat currency.
     * @type {Array<CurrencyInfo>}
     * @memberof CurrencyInfo
     */
    'fiat'?: Array<CurrencyInfo>;
    /**
     * A formatted, human-friendly representation of the transaction value, e.g. the value in Ether, possibly with localized thousands separator and radix character.
     * @type {string}
     * @memberof CurrencyInfo
     */
    'pretty'?: string;
    /**
     * The base value for a given token. For Ethereum this would be 18. This would yield an equation such as 890000000000000000wei / 10^18 = 0.89 ETH.
     * @type {number}
     * @memberof CurrencyInfo
     */
    'decimals'?: number;
    /**
     *
     * @type {string}
     * @memberof CurrencyInfo
     */
    'symbol'?: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyInfo
     */
    'contractAddress'?: string;
    /**
     *
     * @type {string}
     * @memberof CurrencyInfo
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ENS
 */
export interface ENS {
    /**
     * The ENS or domain name.
     * @type {string}
     * @memberof ENS
     */
    'name'?: string;
    /**
     * The address the ENS record points to.
     * @type {string}
     * @memberof ENS
     */
    'pointsTo'?: string;
    /**
     * Date the ENS registration expires.
     * @type {string}
     * @memberof ENS
     */
    'expires'?: string | null;
    /**
     * A wallet address can have multiple ENS records. The primary ENS name represents a \"cross-platform web3 username and profile.\" A wallet address can only have one primary name, and it can change at any time.
     * @type {boolean}
     * @memberof ENS
     */
    'isPrimary'?: boolean;
}
/**
 *
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     *
     * @type {string}
     * @memberof ErrorMessage
     */
    'error': string;
}
/**
 *
 * @export
 * @interface Media
 */
export interface Media {
    /**
     *
     * @type {string}
     * @memberof Media
     */
    'key': string;
    /**
     * URI for the image asset.
     * @type {string}
     * @memberof Media
     */
    'URI'?: string;
    /**
     *
     * @type {Array<MediaVersion>}
     * @memberof Media
     */
    'version'?: Array<MediaVersion>;
}
/**
 *
 * @export
 * @interface MediaPreview
 */
export interface MediaPreview {
    /**
     * URI for the image asset.
     * @type {string}
     * @memberof MediaPreview
     */
    'URI'?: string;
    /**
     *
     * @type {string}
     * @memberof MediaPreview
     */
    'kind'?: MediaPreviewKindEnum;
    /**
     *
     * @type {string}
     * @memberof MediaPreview
     */
    'format'?: string;
    /**
     * The image\'s approximate height in pixels.
     * @type {number}
     * @memberof MediaPreview
     */
    'height'?: number;
    /**
     * The image\'s approximate width in pixels.
     * @type {number}
     * @memberof MediaPreview
     */
    'width'?: number;
    /**
     * If a video, length of video in ISO 8601 duration format.
     * @type {string}
     * @memberof MediaPreview
     */
    'duration'?: string;
}
export const MediaPreviewKindEnum: {
    readonly Video: "video";
    readonly Image: "image";
    readonly Raw: "raw";
    readonly Audio: "audio";
};
export type MediaPreviewKindEnum = (typeof MediaPreviewKindEnum)[keyof typeof MediaPreviewKindEnum];
/**
 *
 * @export
 * @interface MediaVersion
 */
export interface MediaVersion {
    /**
     *
     * @type {string}
     * @memberof MediaVersion
     */
    'kind'?: MediaVersionKindEnum;
    /**
     *
     * @type {string}
     * @memberof MediaVersion
     */
    'format'?: string;
    /**
     *
     * @type {number}
     * @memberof MediaVersion
     */
    'width'?: number;
    /**
     *
     * @type {number}
     * @memberof MediaVersion
     */
    'height'?: number;
    /**
     *
     * @type {number}
     * @memberof MediaVersion
     */
    'numBytes'?: number;
    /**
     * If a video, length of video in ISO 8601 duration format.
     * @type {string}
     * @memberof MediaVersion
     */
    'duration'?: string;
}
export const MediaVersionKindEnum: {
    readonly Video: "video";
    readonly Image: "image";
    readonly Raw: "raw";
    readonly Audio: "audio";
};
export type MediaVersionKindEnum = (typeof MediaVersionKindEnum)[keyof typeof MediaVersionKindEnum];
/**
 *
 * @export
 * @interface NonFungibleToken
 */
export interface NonFungibleToken {
    /**
     * ID of this particular token.
     * @type {string}
     * @memberof NonFungibleToken
     */
    'tokenID': string;
    /**
     *
     * @type {string}
     * @memberof NonFungibleToken
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof NonFungibleToken
     */
    'contractTitle'?: string;
    /**
     * A description of a contract may contain markup such as HTML or Markdown.
     * @type {string}
     * @memberof NonFungibleToken
     */
    'description'?: string;
    /**
     *
     * @type {Media}
     * @memberof NonFungibleToken
     */
    'media'?: Media;
    /**
     * Transformed media assets that are resized and transcoded in to friendlier formats for web and mobile delivery.
     * @type {Array<MediaPreview>}
     * @memberof NonFungibleToken
     */
    'previews'?: Array<MediaPreview>;
    /**
     *
     * @type {Wallet}
     * @memberof NonFungibleToken
     */
    'owner'?: Wallet;
    /**
     *
     * @type {Array<TokenAttribute>}
     * @memberof NonFungibleToken
     */
    'attributes'?: Array<TokenAttribute>;
    /**
     *
     * @type {Collection}
     * @memberof NonFungibleToken
     */
    'collection'?: Collection;
    /**
     *
     * @type {Transaction}
     * @memberof NonFungibleToken
     */
    'purchase'?: Transaction;
    /**
     * A rough heuristic indicating the underlying technology and hypothetical durability of an asset. \"On-Chain\" assets store metadata and the asset media (e.g. SVG file, source code or MIDI) on a blockchain. \"Distributed\" assets are stored on decentralized protocols such as IPFS. \"Web\" assets are stored on services such as Amazon\'s S3. Each technology has different tradeoffs, in particular certain projects need more flexibility than is provided by on-chain data.\"
     * @type {string}
     * @memberof NonFungibleToken
     */
    'durability'?: NonFungibleTokenDurabilityEnum;
    /**
     * The project name of the NFT.
     * @type {string}
     * @memberof NonFungibleToken
     */
    'projectName'?: string;
}
export const NonFungibleTokenDurabilityEnum: {
    readonly OnChain: "On-Chain";
    readonly Decentralized: "Decentralized";
    readonly Web: "Web";
    readonly Unknown: "Unknown";
};
export type NonFungibleTokenDurabilityEnum = (typeof NonFungibleTokenDurabilityEnum)[keyof typeof NonFungibleTokenDurabilityEnum];
/**
 *
 * @export
 * @interface OpenSeaContract
 */
export interface OpenSeaContract {
    /**
     * The type of contract.
     * @type {string}
     * @memberof OpenSeaContract
     */
    'assetContractType'?: OpenSeaContractAssetContractTypeEnum;
    /**
     * The NFT Version
     * @type {string}
     * @memberof OpenSeaContract
     */
    'nftVersion'?: string;
    /**
     * The OpenSea Version
     * @type {string}
     * @memberof OpenSeaContract
     */
    'openSeaVersion'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OpenSeaContract
     */
    'defaultToFiat'?: boolean;
    /**
     * Total fee levied on buyers by this contract, in basis points
     * @type {number}
     * @memberof OpenSeaContract
     */
    'buyerFeeBasisPoints'?: number;
    /**
     * Total fee levied on sellers by this contract, in basis points
     * @type {number}
     * @memberof OpenSeaContract
     */
    'sellerFeeBasisPoints'?: number;
}
export const OpenSeaContractAssetContractTypeEnum: {
    readonly Nft: "NFT";
    readonly Sft: "SFT";
    readonly Unknown: "unknown";
};
export type OpenSeaContractAssetContractTypeEnum = (typeof OpenSeaContractAssetContractTypeEnum)[keyof typeof OpenSeaContractAssetContractTypeEnum];
/**
 *
 * @export
 * @interface OwnedCollection
 */
export interface OwnedCollection {
    /**
     * A sample of the tokens owned by this wallet.
     * @type {Array<Token>}
     * @memberof OwnedCollection
     */
    'tokens'?: Array<Token>;
    /**
     *
     * @type {Collection}
     * @memberof OwnedCollection
     */
    'collection'?: Collection;
    /**
     *
     * @type {CurrencyInfo}
     * @memberof OwnedCollection
     */
    'totalSpent'?: CurrencyInfo;
}
/**
 *
 * @export
 * @interface SearchDocument
 */
export interface SearchDocument {
    /**
     *
     * @type {Token}
     * @memberof SearchDocument
     */
    'token'?: Token;
    /**
     *
     * @type {Wallet}
     * @memberof SearchDocument
     */
    'wallet'?: Wallet;
    /**
     *
     * @type {Collection}
     * @memberof SearchDocument
     */
    'collection'?: Collection;
}
/**
 *
 * @export
 * @interface SocialMedia
 */
export interface SocialMedia {
    /**
     *
     * @type {string}
     * @memberof SocialMedia
     */
    'network'?: string;
    /**
     *
     * @type {string}
     * @memberof SocialMedia
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
    /**
     *
     * @type {BlockchainInfo}
     * @memberof Token
     */
    'blockchain': BlockchainInfo;
    /**
     * Address of the contract that minted this NFT.
     * @type {string}
     * @memberof Token
     */
    'contractAddress': string;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    'tokenStandard'?: string;
    /**
     *
     * @type {string}
     * @memberof Token
     */
    'symbol'?: string;
    /**
     *
     * @type {NonFungibleToken}
     * @memberof Token
     */
    'nft'?: NonFungibleToken;
    /**
     *
     * @type {OpenSeaContract}
     * @memberof Token
     */
    'openSeaContract'?: OpenSeaContract;
}
/**
 *
 * @export
 * @interface TokenAttribute
 */
export interface TokenAttribute {
    /**
     * The key or kind of trait.
     * @type {string}
     * @memberof TokenAttribute
     */
    'traitType'?: string;
    /**
     * A distinct attribute belonging to a particular type of trait.
     * @type {string}
     * @memberof TokenAttribute
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface TokenEvents
 */
export interface TokenEvents {
    /**
     * Metadata for the token specified in the request.
     * @type {Array<Token>}
     * @memberof TokenEvents
     */
    'token'?: Array<Token>;
    /**
     * A list of the events for a token.
     * @type {Array<Transaction>}
     * @memberof TokenEvents
     */
    'events'?: Array<Transaction>;
}
/**
 *
 * @export
 * @interface TokenGate
 */
export interface TokenGate {
    /**
     *
     * @type {boolean}
     * @memberof TokenGate
     */
    'hasToken': boolean;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * Block number of the transaction.
     * @type {number}
     * @memberof Transaction
     */
    'blockNumber'?: number;
    /**
     * Index of the transaction in the block.
     * @type {number}
     * @memberof Transaction
     */
    'transactionIndex'?: number;
    /**
     *
     * @type {CurrencyInfo}
     * @memberof Transaction
     */
    'gasFee'?: CurrencyInfo;
    /**
     * Timestamp of the transaction in RFC 3339.
     * @type {string}
     * @memberof Transaction
     */
    'timestamp'?: string | null;
    /**
     * Log lines related to the transaction.
     * @type {Array<TransactionLogLine>}
     * @memberof Transaction
     */
    'logLine'?: Array<TransactionLogLine>;
}
/**
 *
 * @export
 * @interface TransactionLogLine
 */
export interface TransactionLogLine {
    /**
     * When the value is true, it indicates that a token has been burned, and this transaction corresponds to the burn.
     * @type {boolean}
     * @memberof TransactionLogLine
     */
    'burned'?: boolean | null;
    /**
     * When the value is true, it indicates this is the transaction representing a token minting.
     * @type {boolean}
     * @memberof TransactionLogLine
     */
    'mint'?: boolean | null;
    /**
     * Index of the log in the transaction.
     * @type {number}
     * @memberof TransactionLogLine
     */
    'logIndex'?: number;
    /**
     *
     * @type {string}
     * @memberof TransactionLogLine
     */
    'fromAddress'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionLogLine
     */
    'toAddress'?: string;
    /**
     *
     * @type {CurrencyInfo}
     * @memberof TransactionLogLine
     */
    'price'?: CurrencyInfo;
}
/**
 *
 * @export
 * @interface URL
 */
export interface URL {
    /**
     * Human-readable name of the site.
     * @type {string}
     * @memberof URL
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof URL
     */
    'url'?: string;
}
/**
 *
 * @export
 * @interface Wallet
 */
export interface Wallet {
    /**
     * The total balance in a fiat currency (e.g. USD) for the wallet.
     * @type {Array<CurrencyInfo>}
     * @memberof Wallet
     */
    'totalBalance'?: Array<CurrencyInfo>;
    /**
     * The balance of fungible tokens from smart contracts or blockchains. Certain non-standard ERC-20 tokens (e.g. stETH) may occasionally have stale balances, for example interest payments can be slow to update.
     * @type {Array<CurrencyInfo>}
     * @memberof Wallet
     */
    'balances'?: Array<CurrencyInfo>;
    /**
     *
     * @type {string}
     * @memberof Wallet
     */
    'address': string;
    /**
     *
     * @type {Array<ENS>}
     * @memberof Wallet
     */
    'ens'?: Array<ENS>;
    /**
     *
     * @type {Array<SocialMedia>}
     * @memberof Wallet
     */
    'socialMedia'?: Array<SocialMedia>;
    /**
     * A sample of the most recently transferred tokens owned by this wallet.
     * @type {Array<Token>}
     * @memberof Wallet
     */
    'recentTokens'?: Array<Token>;
    /**
     * A sample of the most expensive tokens owned by this wallet.
     * @type {Array<Token>}
     * @memberof Wallet
     */
    'topTokens'?: Array<Token>;
    /**
     * A sample of the collections this wallet owns.
     * @type {Array<OwnedCollection>}
     * @memberof Wallet
     */
    'collections'?: Array<OwnedCollection>;
    /**
     * A reverse-chronological list of the latest transactions for a wallet.
     * @type {Array<Transaction>}
     * @memberof Wallet
     */
    'history'?: Array<Transaction>;
}
/**
 * AlphaApi - axios parameter creator
 * @export
 */
export const AlphaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopCollections: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTokens: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopWallets: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AlphaApi - functional programming interface
 * @export
 */
export const AlphaApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopCollections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collection>>>;
    /**
     *
     * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTokens(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopWallets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wallet>>>;
};
/**
 * AlphaApi - factory interface
 * @export
 */
export const AlphaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopCollections(options?: any): AxiosPromise<Array<Collection>>;
    /**
     *
     * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopTokens(options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopWallets(options?: any): AxiosPromise<Array<Wallet>>;
};
/**
 * AlphaApi - object-oriented interface
 * @export
 * @class AlphaApi
 * @extends {BaseAPI}
 */
export class AlphaApi extends BaseAPI {
    /**
     *
     * @summary Returns trending and interesting collections on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlphaApi
     */
    getTopCollections(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Collection[], any>>;
    /**
     *
     * @summary Returns trending and interesting NFTs and SFTs on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlphaApi
     */
    getTopTokens(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Returns trending and interesting wallets on Ethereum. Useful for powering discovery experiences and providing an on-ramp to exploring creative blockchain data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlphaApi
     */
    getTopWallets(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Wallet[], any>>;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Lists all supported blockchains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockchains: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a collection by its contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection: (contractAddress: string, chainID?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tokens by contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTokens: (contractAddress: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \"goblintown\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).
     * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.
     * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTokensByContractAndID: (contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the transaction history for a collection
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTransactionHistory: (contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get search results such as wallets, tokens, and collections by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchResults: (query: string, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of tokens sold by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSoldTokens: (walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a token by its contract address and token ID.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken: (contractAddress: string, tokenID: string, chainID?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Determine if a wallet has a given token from a contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenGate: (tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of transfer transactions on a specified token.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenTransfers: (contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get tokens by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokensBySearchQuery: (query: string, cursor?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a wallet by a wallet address
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet: (walletAddress: string, chainID?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of balances for tokens this wallet currently owns.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletBalances: (walletAddress: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of tokens minted by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletMints: (walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of tokens owned by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletTokens: (walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletTransactions: (walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Lists all supported blockchains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockchains(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockchainInfo>>>;
    /**
     *
     * @summary Get a collection by its contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(contractAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collection>>>;
    /**
     *
     * @summary Get tokens by contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTokens(contractAddress: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \"goblintown\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).
     * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.
     * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Get the transaction history for a collection
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>>;
    /**
     *
     * @summary Get search results such as wallets, tokens, and collections by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchResults(query: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchDocument>>>;
    /**
     *
     * @summary Returns a list of tokens sold by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Get a token by its contract address and token ID.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken(contractAddress: string, tokenID: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Determine if a wallet has a given token from a contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenGate>>;
    /**
     *
     * @summary Returns a list of transfer transactions on a specified token.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenEvents>>;
    /**
     *
     * @summary Get tokens by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokensBySearchQuery(query: string, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Get a wallet by a wallet address
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(walletAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wallet>>>;
    /**
     *
     * @summary Returns a list of balances for tokens this wallet currently owns.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletBalances(walletAddress: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrencyInfo>>>;
    /**
     *
     * @summary Returns a list of tokens minted by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Returns a list of tokens owned by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Token>>>;
    /**
     *
     * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Lists all supported blockchains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockchains(options?: any): AxiosPromise<Array<BlockchainInfo>>;
    /**
     *
     * @summary Get a collection by its contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(contractAddress: string, chainID?: string, options?: any): AxiosPromise<Array<Collection>>;
    /**
     *
     * @summary Get tokens by contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTokens(contractAddress: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \"goblintown\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).
     * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.
     * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Get the transaction history for a collection
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Transaction>>;
    /**
     *
     * @summary Get search results such as wallets, tokens, and collections by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearchResults(query: string, cursor?: string, options?: any): AxiosPromise<Array<SearchDocument>>;
    /**
     *
     * @summary Returns a list of tokens sold by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Get a token by its contract address and token ID.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getToken(contractAddress: string, tokenID: string, chainID?: string, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Determine if a wallet has a given token from a contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: any): AxiosPromise<TokenGate>;
    /**
     *
     * @summary Returns a list of transfer transactions on a specified token.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: any): AxiosPromise<TokenEvents>;
    /**
     *
     * @summary Get tokens by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokensBySearchQuery(query: string, cursor?: string, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Get a wallet by a wallet address
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(walletAddress: string, chainID?: string, options?: any): AxiosPromise<Array<Wallet>>;
    /**
     *
     * @summary Returns a list of balances for tokens this wallet currently owns.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletBalances(walletAddress: string, limit?: number, options?: any): AxiosPromise<Array<CurrencyInfo>>;
    /**
     *
     * @summary Returns a list of tokens minted by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Returns a list of tokens owned by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: any): AxiosPromise<Array<Token>>;
    /**
     *
     * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: any): AxiosPromise<Array<Transaction>>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Lists all supported blockchains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBlockchains(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BlockchainInfo[], any>>;
    /**
     *
     * @summary Get a collection by its contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCollection(contractAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Collection[], any>>;
    /**
     *
     * @summary Get tokens by contract address.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getContractTokens(contractAddress: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Get tokens by a pair of contract addresses and token IDs. The input are two ordered arrays. The first element of contractAddresses should be related to the 1st element of the tokenID, etc. In the below example two tokens are being requested, token 3481 from the \"goblintown\" contract (i.e. 0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e) and token 50603 from the Otherdeed contract (i.e. 0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258).
     * @param {string} contractAddresses A comma-separated hex address for a blockchain contract, the order of values should match the order in tokenIdentifiers.
     * @param {string} tokenIdentifiers A comma-separated token ID, the order of values should match the order in contractAddresses.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getContractTokensByContractAndID(contractAddresses: string, tokenIdentifiers: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Get the transaction history for a collection
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getContractTransactionHistory(contractAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Transaction[], any>>;
    /**
     *
     * @summary Get search results such as wallets, tokens, and collections by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSearchResults(query: string, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchDocument[], any>>;
    /**
     *
     * @summary Returns a list of tokens sold by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSoldTokens(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Get a token by its contract address and token ID.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getToken(contractAddress: string, tokenID: string, chainID?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Determine if a wallet has a given token from a contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTokenGate(tokenID: string, contractAddress: string, walletAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenGate, any>>;
    /**
     *
     * @summary Returns a list of transfer transactions on a specified token.
     * @param {string} contractAddress A hex address for a blockchain contract.
     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTokenTransfers(contractAddress: string, tokenID: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenEvents, any>>;
    /**
     *
     * @summary Get tokens by a search query.
     * @param {string} query A search query that returns matching results
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTokensBySearchQuery(query: string, cursor?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Get a wallet by a wallet address
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWallet(walletAddress: string, chainID?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Wallet[], any>>;
    /**
     *
     * @summary Returns a list of balances for tokens this wallet currently owns.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWalletBalances(walletAddress: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrencyInfo[], any>>;
    /**
     *
     * @summary Returns a list of tokens minted by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWalletMints(walletAddress: string, chainID?: string, cursor?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Returns a list of tokens owned by a wallet.
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWalletTokens(walletAddress: string, cursor?: string, chainID?: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Token[], any>>;
    /**
     *
     * @summary Returns a list of transactions that have been performed by this wallet. Use token type to restrict to only certain transactions, such as NFTs
     * @param {string} walletAddress A hex string referencing a public wallet address.
     * @param {string} [cursor] Cursor to support API pagination.
     * @param {number} [limit] Limits the number of results in a single response.
     * @param {string} [chainID] An identifier to restrict results to a given blockchain. Provide either a keyword such as \&quot;ethereum\&quot; or \&quot;polygon\&quot; to restrict to the mainnet for named chains. Also supports CAIP-2 identifiers.
     * @param {'NFT' | 'SFT' | 'unknown'} [tokenType] An indicator that be used to filter to only a subet of tokens, for example only NFTs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getWalletTransactions(walletAddress: string, cursor?: string, limit?: number, chainID?: string, tokenType?: 'NFT' | 'SFT' | 'unknown', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Transaction[], any>>;
}

//# sourceMappingURL=index.d.ts.map
