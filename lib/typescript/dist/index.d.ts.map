{"mappings":"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","sources":["configuration.ts","api.ts","index.ts"],"sourcesContent":["// tslint:disable\n/**\n * neeva.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.0.3\n * \n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    basePath?: string;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n    }\n}\n","/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * neeva.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.0.3\n * \n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nimport * as url from \"url\";\nimport * as isomorphicFetch from \"isomorphic-fetch\";\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"https://virtserver.swaggerhub.com/neevaxyz/jdtest/0.0.2\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface Collection\n */\nexport interface Collection {\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    blockchain: string;\n    /**\n     * Address of the contract that minted this NFT\n     * @type {string}\n     * @memberof Collection\n     */\n    contractAddress: string;\n    /**\n     * A sample of the tokens minted by this collection\n     * @type {Array<Token>}\n     * @memberof Collection\n     */\n    tokens?: Array<Token>;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    symbol?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    slug?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Collection\n     */\n    shortDescription?: string;\n    /**\n     * Timestamp of creation of this contract in RFC 3339.\n     * @type {Date}\n     * @memberof Collection\n     */\n    createdDate?: Date;\n    /**\n     * \n     * @type {Media}\n     * @memberof Collection\n     */\n    bannerImage?: Media;\n    /**\n     * \n     * @type {Media}\n     * @memberof Collection\n     */\n    featuredImage?: Media;\n    /**\n     * \n     * @type {Array<URL>}\n     * @memberof Collection\n     */\n    urls?: Array<URL>;\n    /**\n     * \n     * @type {Array<SocialMedia>}\n     * @memberof Collection\n     */\n    socialMedia?: Array<SocialMedia>;\n}\n/**\n * \n * @export\n * @interface CurrencyInfo\n */\nexport interface CurrencyInfo {\n    /**\n     * amount as string encoded bigint\n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    value?: string;\n    /**\n     * 10^decimals = 1 unit, e.g. 10^18 = 1 ETH\n     * @type {number}\n     * @memberof CurrencyInfo\n     */\n    decimals?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    symbol?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CurrencyInfo\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface ENS\n */\nexport interface ENS {\n    /**\n     * The ENS or domain name\n     * @type {string}\n     * @memberof ENS\n     */\n    name?: string;\n    /**\n     * The address the ENS record points to\n     * @type {string}\n     * @memberof ENS\n     */\n    pointsTo?: string;\n    /**\n     * Date the ENS registration explires\n     * @type {Date}\n     * @memberof ENS\n     */\n    expires?: Date;\n    /**\n     * A wallet address can have multiple ENS names. The primary ENS name represents a \\\"cross-platform web3 username and profile.\\\" A wallet address can only have one primary name, and it can change at any time.\n     * @type {boolean}\n     * @memberof ENS\n     */\n    isPrimary?: boolean;\n}\n/**\n * \n * @export\n * @interface Media\n */\nexport interface Media {\n    /**\n     * \n     * @type {string}\n     * @memberof Media\n     */\n    key: string;\n    /**\n     * URI for the image asset\n     * @type {string}\n     * @memberof Media\n     */\n    URI?: string;\n    /**\n     * \n     * @type {Array<MediaVersion>}\n     * @memberof Media\n     */\n    version?: Array<MediaVersion>;\n}\n/**\n * \n * @export\n * @interface MediaVersion\n */\nexport interface MediaVersion {\n    /**\n     * \n     * @type {string}\n     * @memberof MediaVersion\n     */\n    kind?: MediaVersion.KindEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof MediaVersion\n     */\n    format?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    width?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    height?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MediaVersion\n     */\n    numBytes?: number;\n    /**\n     * If a video, length of video in ISO 8601 duration format.\n     * @type {string}\n     * @memberof MediaVersion\n     */\n    duration?: string;\n}\n\n/**\n * @export\n * @namespace MediaVersion\n */\nexport namespace MediaVersion {\n    /**\n     * @export\n     * @enum {string}\n     */\n    export enum KindEnum {\n        Video = <any> 'video',\n        Image = <any> 'image',\n        Raw = <any> 'raw',\n        Audio = <any> 'audio'\n    }\n}\n/**\n * \n * @export\n * @interface OwnedCollection\n */\nexport interface OwnedCollection {\n    /**\n     * A sample of the tokens owned by this wallet\n     * @type {Array<Token>}\n     * @memberof OwnedCollection\n     */\n    tokens?: Array<Token>;\n    /**\n     * \n     * @type {Collection}\n     * @memberof OwnedCollection\n     */\n    collection?: Collection;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof OwnedCollection\n     */\n    totalSpent?: CurrencyInfo;\n}\n/**\n * \n * @export\n * @interface SocialMedia\n */\nexport interface SocialMedia {\n    /**\n     * \n     * @type {string}\n     * @memberof SocialMedia\n     */\n    network?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SocialMedia\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface Token\n */\nexport interface Token {\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    blockchain: string;\n    /**\n     * Address of the contract that minted this NFT\n     * @type {string}\n     * @memberof Token\n     */\n    contractAddress: string;\n    /**\n     * ID of this particular token\n     * @type {string}\n     * @memberof Token\n     */\n    tokenID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    tokenStandard?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    contractTitle?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Token\n     */\n    symbol?: string;\n    /**\n     * A description of a contract may contain markup such as HTML or Markdown\n     * @type {string}\n     * @memberof Token\n     */\n    description?: string;\n    /**\n     * \n     * @type {Media}\n     * @memberof Token\n     */\n    media?: Media;\n    /**\n     * \n     * @type {Wallet}\n     * @memberof Token\n     */\n    owner?: Wallet;\n    /**\n     * \n     * @type {Array<TokenAttribute>}\n     * @memberof Token\n     */\n    attributes?: Array<TokenAttribute>;\n    /**\n     * \n     * @type {Collection}\n     * @memberof Token\n     */\n    collection?: Collection;\n    /**\n     * \n     * @type {Transaction}\n     * @memberof Token\n     */\n    purchase?: Transaction;\n}\n/**\n * \n * @export\n * @interface TokenAttribute\n */\nexport interface TokenAttribute {\n    /**\n     * The key or kind of trait\n     * @type {string}\n     * @memberof TokenAttribute\n     */\n    traitType?: string;\n    /**\n     * A distinct attribute belonging to a particular type of trait\n     * @type {string}\n     * @memberof TokenAttribute\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface Transaction\n */\nexport interface Transaction {\n    /**\n     * \n     * @type {string}\n     * @memberof Transaction\n     */\n    fromAddress?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Transaction\n     */\n    toAddress?: string;\n    /**\n     * Timestamp of last transaction for this token in RFC 3339.\n     * @type {Date}\n     * @memberof Transaction\n     */\n    timestamp?: Date;\n    /**\n     * \n     * @type {CurrencyInfo}\n     * @memberof Transaction\n     */\n    price?: CurrencyInfo;\n}\n/**\n * \n * @export\n * @interface URL\n */\nexport interface URL {\n    /**\n     * \n     * @type {string}\n     * @memberof URL\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof URL\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface Wallet\n */\nexport interface Wallet {\n    /**\n     * \n     * @type {string}\n     * @memberof Wallet\n     */\n    address: string;\n    /**\n     * \n     * @type {Array<ENS>}\n     * @memberof Wallet\n     */\n    ens?: Array<ENS>;\n    /**\n     * \n     * @type {string}\n     * @memberof Wallet\n     */\n    twitterHandle?: string;\n    /**\n     * A sample of the tokens owned by this wallet\n     * @type {Array<Token>}\n     * @memberof Wallet\n     */\n    tokens?: Array<Token>;\n    /**\n     * A sample of the collections this wallet owns.\n     * @type {Array<OwnedCollection>}\n     * @memberof Wallet\n     */\n    collections?: Array<OwnedCollection>;\n}\n/**\n * DefaultApi - fetch parameter creator\n * @export\n */\nexport const DefaultApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get a collection by its contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsContractAddressGet(contractAddress: string, options: any = {}): FetchArgs {\n            // verify required parameter 'contractAddress' is not null or undefined\n            if (contractAddress === null || contractAddress === undefined) {\n                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1CollectionsContractAddressGet.');\n            }\n            const localVarPath = `/api/v1/collections/{contractAddress}/`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a collections\n         * @param {string} [contractAddress] A hex address for a blockchain contract\n         * @param {string} [query] A search query containing keywords or operators to filter tokens\n         * @param {string} [sort] A means to order tokens by specific values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsGet(contractAddress?: string, query?: string, sort?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/api/v1/collections/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (contractAddress !== undefined) {\n                localVarQueryParameter['contractAddress'] = contractAddress;\n            }\n\n            if (query !== undefined) {\n                localVarQueryParameter['query'] = query;\n            }\n\n            if (sort !== undefined) {\n                localVarQueryParameter['sort'] = sort;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressGet(contractAddress: string, options: any = {}): FetchArgs {\n            // verify required parameter 'contractAddress' is not null or undefined\n            if (contractAddress === null || contractAddress === undefined) {\n                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1TokensContractAddressGet.');\n            }\n            const localVarPath = `/api/v1/tokens/{contractAddress}/`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token id\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'contractAddress' is not null or undefined\n            if (contractAddress === null || contractAddress === undefined) {\n                throw new RequiredError('contractAddress','Required parameter contractAddress was null or undefined when calling apiV1TokensContractAddressTokenIDGet.');\n            }\n            // verify required parameter 'tokenID' is not null or undefined\n            if (tokenID === null || tokenID === undefined) {\n                throw new RequiredError('tokenID','Required parameter tokenID was null or undefined when calling apiV1TokensContractAddressTokenIDGet.');\n            }\n            const localVarPath = `/api/v1/tokens/{contractAddress}/{tokenID}`\n                .replace(`{${\"contractAddress\"}}`, encodeURIComponent(String(contractAddress)))\n                .replace(`{${\"tokenID\"}}`, encodeURIComponent(String(tokenID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get tokens\n         * @param {string} [contractAddress] A hex address for a blockchain contract\n         * @param {string} [tokenID] An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {string} [query] A search query containing keywords or operators to filter tokens\n         * @param {string} [sort] A means to order tokens by specific values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensGet(contractAddress?: string, tokenID?: string, query?: string, sort?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/api/v1/tokens/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (contractAddress !== undefined) {\n                localVarQueryParameter['contractAddress'] = contractAddress;\n            }\n\n            if (tokenID !== undefined) {\n                localVarQueryParameter['tokenID'] = tokenID;\n            }\n\n            if (query !== undefined) {\n                localVarQueryParameter['query'] = query;\n            }\n\n            if (sort !== undefined) {\n                localVarQueryParameter['sort'] = sort;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a Wallet\n         * @param {string} [walletAddress] A hex string referencing a public wallet address\n         * @param {string} [query] A search query containing keywords or operators to filter wallets\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsGet(walletAddress?: string, query?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/api/v1/wallets/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (walletAddress !== undefined) {\n                localVarQueryParameter['walletAddress'] = walletAddress;\n            }\n\n            if (query !== undefined) {\n                localVarQueryParameter['query'] = query;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsWalletAddressGet(walletAddress: string, options: any = {}): FetchArgs {\n            // verify required parameter 'walletAddress' is not null or undefined\n            if (walletAddress === null || walletAddress === undefined) {\n                throw new RequiredError('walletAddress','Required parameter walletAddress was null or undefined when calling apiV1WalletsWalletAddressGet.');\n            }\n            const localVarPath = `/api/v1/wallets/{walletAddress}/`\n                .replace(`{${\"walletAddress\"}}`, encodeURIComponent(String(walletAddress)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get a collection by its contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsContractAddressGet(contractAddress: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Collection>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1CollectionsContractAddressGet(contractAddress, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a collections\n         * @param {string} [contractAddress] A hex address for a blockchain contract\n         * @param {string} [query] A search query containing keywords or operators to filter tokens\n         * @param {string} [sort] A means to order tokens by specific values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsGet(contractAddress?: string, query?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Collection>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1CollectionsGet(contractAddress, query, sort, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get tokens by contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressGet(contractAddress: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Token>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1TokensContractAddressGet(contractAddress, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token id\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Token> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1TokensContractAddressTokenIDGet(contractAddress, tokenID, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get tokens\n         * @param {string} [contractAddress] A hex address for a blockchain contract\n         * @param {string} [tokenID] An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {string} [query] A search query containing keywords or operators to filter tokens\n         * @param {string} [sort] A means to order tokens by specific values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensGet(contractAddress?: string, tokenID?: string, query?: string, sort?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Token>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1TokensGet(contractAddress, tokenID, query, sort, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a Wallet\n         * @param {string} [walletAddress] A hex string referencing a public wallet address\n         * @param {string} [query] A search query containing keywords or operators to filter wallets\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsGet(walletAddress?: string, query?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Wallet>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1WalletsGet(walletAddress, query, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsWalletAddressGet(walletAddress: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Wallet>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).apiV1WalletsWalletAddressGet(walletAddress, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @summary Get a collection by its contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsContractAddressGet(contractAddress: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1CollectionsContractAddressGet(contractAddress, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a collections\n         * @param {string} [contractAddress] A hex address for a blockchain contract\n         * @param {string} [query] A search query containing keywords or operators to filter tokens\n         * @param {string} [sort] A means to order tokens by specific values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1CollectionsGet(contractAddress?: string, query?: string, sort?: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1CollectionsGet(contractAddress, query, sort, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get tokens by contract address\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressGet(contractAddress: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1TokensContractAddressGet(contractAddress, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a token by its contract address and token id\n         * @param {string} contractAddress A hex address for a blockchain contract\n         * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1TokensContractAddressTokenIDGet(contractAddress, tokenID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get tokens\n         * @param {string} [contractAddress] A hex address for a blockchain contract\n         * @param {string} [tokenID] An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n         * @param {string} [query] A search query containing keywords or operators to filter tokens\n         * @param {string} [sort] A means to order tokens by specific values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1TokensGet(contractAddress?: string, tokenID?: string, query?: string, sort?: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1TokensGet(contractAddress, tokenID, query, sort, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a Wallet\n         * @param {string} [walletAddress] A hex string referencing a public wallet address\n         * @param {string} [query] A search query containing keywords or operators to filter wallets\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsGet(walletAddress?: string, query?: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1WalletsGet(walletAddress, query, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @summary Get a wallet by a wallet address\n         * @param {string} walletAddress A hex string referencing a public wallet address.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1WalletsWalletAddressGet(walletAddress: string, options?: any) {\n            return DefaultApiFp(configuration).apiV1WalletsWalletAddressGet(walletAddress, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @summary Get a collection by its contract address\n     * @param {string} contractAddress A hex address for a blockchain contract\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1CollectionsContractAddressGet(contractAddress: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1CollectionsContractAddressGet(contractAddress, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a collections\n     * @param {string} [contractAddress] A hex address for a blockchain contract\n     * @param {string} [query] A search query containing keywords or operators to filter tokens\n     * @param {string} [sort] A means to order tokens by specific values\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1CollectionsGet(contractAddress?: string, query?: string, sort?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1CollectionsGet(contractAddress, query, sort, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get tokens by contract address\n     * @param {string} contractAddress A hex address for a blockchain contract\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1TokensContractAddressGet(contractAddress: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1TokensContractAddressGet(contractAddress, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a token by its contract address and token id\n     * @param {string} contractAddress A hex address for a blockchain contract\n     * @param {string} tokenID An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1TokensContractAddressTokenIDGet(contractAddress: string, tokenID: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1TokensContractAddressTokenIDGet(contractAddress, tokenID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get tokens\n     * @param {string} [contractAddress] A hex address for a blockchain contract\n     * @param {string} [tokenID] An arbitrary ID defined by a contract to uniquely identify a cryptographic asset such as an NFT\n     * @param {string} [query] A search query containing keywords or operators to filter tokens\n     * @param {string} [sort] A means to order tokens by specific values\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1TokensGet(contractAddress?: string, tokenID?: string, query?: string, sort?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1TokensGet(contractAddress, tokenID, query, sort, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a Wallet\n     * @param {string} [walletAddress] A hex string referencing a public wallet address\n     * @param {string} [query] A search query containing keywords or operators to filter wallets\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1WalletsGet(walletAddress?: string, query?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1WalletsGet(walletAddress, query, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Get a wallet by a wallet address\n     * @param {string} walletAddress A hex string referencing a public wallet address.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiV1WalletsWalletAddressGet(walletAddress: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiV1WalletsWalletAddressGet(walletAddress, options)(this.fetch, this.basePath);\n    }\n\n}\n","// tslint:disable\n/**\n * neeva.xyz REST API\n * REST API for blockchain data.\n *\n * OpenAPI spec version: 0.0.3\n * \n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n"],"names":[],"version":3,"file":"index.d.ts.map"}