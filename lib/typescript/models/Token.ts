/* tslint:disable */
/* eslint-disable */
/**
 * n.xyz REST API
 * REST API for blockchain data.
 *
 * The version of the OpenAPI document: 0.17.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockchainInfo } from './BlockchainInfo';
import {
    BlockchainInfoFromJSON,
    BlockchainInfoFromJSONTyped,
    BlockchainInfoToJSON,
} from './BlockchainInfo';
import type { NonFungibleToken } from './NonFungibleToken';
import {
    NonFungibleTokenFromJSON,
    NonFungibleTokenFromJSONTyped,
    NonFungibleTokenToJSON,
} from './NonFungibleToken';
import type { OpenSeaContract } from './OpenSeaContract';
import {
    OpenSeaContractFromJSON,
    OpenSeaContractFromJSONTyped,
    OpenSeaContractToJSON,
} from './OpenSeaContract';

/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {BlockchainInfo}
     * @memberof Token
     */
    blockchain: BlockchainInfo;
    /**
     * Address of the contract that minted this NFT.
     * @type {string}
     * @memberof Token
     */
    contractAddress: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    tokenStandard?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    symbol?: string;
    /**
     * 
     * @type {NonFungibleToken}
     * @memberof Token
     */
    nft?: NonFungibleToken;
    /**
     * 
     * @type {OpenSeaContract}
     * @memberof Token
     */
    openSeaContract?: OpenSeaContract;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "blockchain" in value;
    isInstance = isInstance && "contractAddress" in value;

    return isInstance;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockchain': BlockchainInfoFromJSON(json['blockchain']),
        'contractAddress': json['contractAddress'],
        'tokenStandard': !exists(json, 'tokenStandard') ? undefined : json['tokenStandard'],
        'symbol': !exists(json, 'symbol') ? undefined : json['symbol'],
        'nft': !exists(json, 'nft') ? undefined : NonFungibleTokenFromJSON(json['nft']),
        'openSeaContract': !exists(json, 'openSeaContract') ? undefined : OpenSeaContractFromJSON(json['openSeaContract']),
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockchain': BlockchainInfoToJSON(value.blockchain),
        'contractAddress': value.contractAddress,
        'tokenStandard': value.tokenStandard,
        'symbol': value.symbol,
        'nft': NonFungibleTokenToJSON(value.nft),
        'openSeaContract': OpenSeaContractToJSON(value.openSeaContract),
    };
}

