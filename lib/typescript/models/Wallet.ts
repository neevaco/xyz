/* tslint:disable */
/* eslint-disable */
/**
 * n.xyz REST API
 * REST API for blockchain data.
 *
 * The version of the OpenAPI document: 0.17.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyInfo } from './CurrencyInfo';
import {
    CurrencyInfoFromJSON,
    CurrencyInfoFromJSONTyped,
    CurrencyInfoToJSON,
} from './CurrencyInfo';
import type { ENS } from './ENS';
import {
    ENSFromJSON,
    ENSFromJSONTyped,
    ENSToJSON,
} from './ENS';
import type { OwnedCollection } from './OwnedCollection';
import {
    OwnedCollectionFromJSON,
    OwnedCollectionFromJSONTyped,
    OwnedCollectionToJSON,
} from './OwnedCollection';
import type { SocialMedia } from './SocialMedia';
import {
    SocialMediaFromJSON,
    SocialMediaFromJSONTyped,
    SocialMediaToJSON,
} from './SocialMedia';
import type { Token } from './Token';
import {
    TokenFromJSON,
    TokenFromJSONTyped,
    TokenToJSON,
} from './Token';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
} from './Transaction';

/**
 * 
 * @export
 * @interface Wallet
 */
export interface Wallet {
    /**
     * The total balance in a fiat currency (e.g. USD) for the wallet.
     * @type {Array<CurrencyInfo>}
     * @memberof Wallet
     */
    totalBalance?: Array<CurrencyInfo>;
    /**
     * The balance of fungible tokens from smart contracts or blockchains. Certain non-standard ERC-20 tokens (e.g. stETH) may occasionally have stale balances, for example interest payments can be slow to update.
     * @type {Array<CurrencyInfo>}
     * @memberof Wallet
     */
    balances?: Array<CurrencyInfo>;
    /**
     * 
     * @type {string}
     * @memberof Wallet
     */
    address: string;
    /**
     * 
     * @type {Array<ENS>}
     * @memberof Wallet
     */
    ens?: Array<ENS>;
    /**
     * 
     * @type {Array<SocialMedia>}
     * @memberof Wallet
     */
    socialMedia?: Array<SocialMedia>;
    /**
     * A sample of the most recently transferred tokens owned by this wallet.
     * @type {Array<Token>}
     * @memberof Wallet
     */
    recentTokens?: Array<Token>;
    /**
     * A sample of the most expensive tokens owned by this wallet.
     * @type {Array<Token>}
     * @memberof Wallet
     */
    topTokens?: Array<Token>;
    /**
     * A sample of the collections this wallet owns.
     * @type {Array<OwnedCollection>}
     * @memberof Wallet
     */
    collections?: Array<OwnedCollection>;
    /**
     * A reverse-chronological list of the latest transactions for a wallet.
     * @type {Array<Transaction>}
     * @memberof Wallet
     */
    history?: Array<Transaction>;
}

/**
 * Check if a given object implements the Wallet interface.
 */
export function instanceOfWallet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function WalletFromJSON(json: any): Wallet {
    return WalletFromJSONTyped(json, false);
}

export function WalletFromJSONTyped(json: any, ignoreDiscriminator: boolean): Wallet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalBalance': !exists(json, 'totalBalance') ? undefined : ((json['totalBalance'] as Array<any>).map(CurrencyInfoFromJSON)),
        'balances': !exists(json, 'balances') ? undefined : ((json['balances'] as Array<any>).map(CurrencyInfoFromJSON)),
        'address': json['address'],
        'ens': !exists(json, 'ens') ? undefined : ((json['ens'] as Array<any>).map(ENSFromJSON)),
        'socialMedia': !exists(json, 'socialMedia') ? undefined : ((json['socialMedia'] as Array<any>).map(SocialMediaFromJSON)),
        'recentTokens': !exists(json, 'recentTokens') ? undefined : ((json['recentTokens'] as Array<any>).map(TokenFromJSON)),
        'topTokens': !exists(json, 'topTokens') ? undefined : ((json['topTokens'] as Array<any>).map(TokenFromJSON)),
        'collections': !exists(json, 'collections') ? undefined : ((json['collections'] as Array<any>).map(OwnedCollectionFromJSON)),
        'history': !exists(json, 'history') ? undefined : ((json['history'] as Array<any>).map(TransactionFromJSON)),
    };
}

export function WalletToJSON(value?: Wallet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalBalance': value.totalBalance === undefined ? undefined : ((value.totalBalance as Array<any>).map(CurrencyInfoToJSON)),
        'balances': value.balances === undefined ? undefined : ((value.balances as Array<any>).map(CurrencyInfoToJSON)),
        'address': value.address,
        'ens': value.ens === undefined ? undefined : ((value.ens as Array<any>).map(ENSToJSON)),
        'socialMedia': value.socialMedia === undefined ? undefined : ((value.socialMedia as Array<any>).map(SocialMediaToJSON)),
        'recentTokens': value.recentTokens === undefined ? undefined : ((value.recentTokens as Array<any>).map(TokenToJSON)),
        'topTokens': value.topTokens === undefined ? undefined : ((value.topTokens as Array<any>).map(TokenToJSON)),
        'collections': value.collections === undefined ? undefined : ((value.collections as Array<any>).map(OwnedCollectionToJSON)),
        'history': value.history === undefined ? undefined : ((value.history as Array<any>).map(TransactionToJSON)),
    };
}

