/* tslint:disable */
/* eslint-disable */
/**
 * n.xyz REST API
 * REST API for blockchain data.
 *
 * The version of the OpenAPI document: 0.17.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Token } from './Token';
import {
    TokenFromJSON,
    TokenFromJSONTyped,
    TokenToJSON,
} from './Token';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
} from './Transaction';

/**
 * 
 * @export
 * @interface TokenEvents
 */
export interface TokenEvents {
    /**
     * Metadata for the token specified in the request.
     * @type {Array<Token>}
     * @memberof TokenEvents
     */
    token?: Array<Token>;
    /**
     * A list of the events for a token.
     * @type {Array<Transaction>}
     * @memberof TokenEvents
     */
    events?: Array<Transaction>;
}

/**
 * Check if a given object implements the TokenEvents interface.
 */
export function instanceOfTokenEvents(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TokenEventsFromJSON(json: any): TokenEvents {
    return TokenEventsFromJSONTyped(json, false);
}

export function TokenEventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenEvents {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'token': !exists(json, 'token') ? undefined : ((json['token'] as Array<any>).map(TokenFromJSON)),
        'events': !exists(json, 'events') ? undefined : ((json['events'] as Array<any>).map(TransactionFromJSON)),
    };
}

export function TokenEventsToJSON(value?: TokenEvents | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'token': value.token === undefined ? undefined : ((value.token as Array<any>).map(TokenToJSON)),
        'events': value.events === undefined ? undefined : ((value.events as Array<any>).map(TransactionToJSON)),
    };
}

