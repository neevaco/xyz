/* tslint:disable */
/* eslint-disable */
/**
 * n.xyz REST API
 * REST API for blockchain data.
 *
 * The version of the OpenAPI document: 0.17.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyInfo } from './CurrencyInfo';
import {
    CurrencyInfoFromJSON,
    CurrencyInfoFromJSONTyped,
    CurrencyInfoToJSON,
} from './CurrencyInfo';
import type { TransactionLogLine } from './TransactionLogLine';
import {
    TransactionLogLineFromJSON,
    TransactionLogLineFromJSONTyped,
    TransactionLogLineToJSON,
} from './TransactionLogLine';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * Block number of the transaction.
     * @type {number}
     * @memberof Transaction
     */
    blockNumber?: number;
    /**
     * Index of the transaction in the block.
     * @type {number}
     * @memberof Transaction
     */
    transactionIndex?: number;
    /**
     * 
     * @type {CurrencyInfo}
     * @memberof Transaction
     */
    gasFee?: CurrencyInfo;
    /**
     * Timestamp of the transaction in RFC 3339.
     * @type {Date}
     * @memberof Transaction
     */
    timestamp?: Date | null;
    /**
     * Log lines related to the transaction.
     * @type {Array<TransactionLogLine>}
     * @memberof Transaction
     */
    logLine?: Array<TransactionLogLine>;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockNumber': !exists(json, 'blockNumber') ? undefined : json['blockNumber'],
        'transactionIndex': !exists(json, 'transactionIndex') ? undefined : json['transactionIndex'],
        'gasFee': !exists(json, 'gasFee') ? undefined : CurrencyInfoFromJSON(json['gasFee']),
        'timestamp': !exists(json, 'timestamp') ? undefined : (json['timestamp'] === null ? null : new Date(json['timestamp'])),
        'logLine': !exists(json, 'logLine') ? undefined : ((json['logLine'] as Array<any>).map(TransactionLogLineFromJSON)),
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockNumber': value.blockNumber,
        'transactionIndex': value.transactionIndex,
        'gasFee': CurrencyInfoToJSON(value.gasFee),
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp === null ? null : value.timestamp.toISOString()),
        'logLine': value.logLine === undefined ? undefined : ((value.logLine as Array<any>).map(TransactionLogLineToJSON)),
    };
}

