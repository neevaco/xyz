/* tslint:disable */
/* eslint-disable */
/**
 * n.xyz REST API
 * REST API for blockchain data.
 *
 * The version of the OpenAPI document: 0.17.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CurrencyInfo
 */
export interface CurrencyInfo {
    /**
     * Transaction value as a string-encoded bigint in the base unit for a given blockchain (e.g. wei for Ethereum) or fiat currency (e.g. US Dollars).
     * @type {string}
     * @memberof CurrencyInfo
     */
    value?: string;
    /**
     * Transaction value as a float representing the amount of tokens, e.g. 0.89 would be 89% of a token.
     * @type {number}
     * @memberof CurrencyInfo
     */
    tokenValue?: number;
    /**
     * The total value of this token in fiat currency.
     * @type {Array<CurrencyInfo>}
     * @memberof CurrencyInfo
     */
    fiat?: Array<CurrencyInfo>;
    /**
     * A formatted, human-friendly representation of the transaction value, e.g. the value in Ether, possibly with localized thousands separator and radix character.
     * @type {string}
     * @memberof CurrencyInfo
     */
    pretty?: string;
    /**
     * The base value for a given token. For Ethereum this would be 18. This would yield an equation such as 890000000000000000wei / 10^18 = 0.89 ETH.
     * @type {number}
     * @memberof CurrencyInfo
     */
    decimals?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyInfo
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyInfo
     */
    contractAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyInfo
     */
    name?: string;
}

/**
 * Check if a given object implements the CurrencyInfo interface.
 */
export function instanceOfCurrencyInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrencyInfoFromJSON(json: any): CurrencyInfo {
    return CurrencyInfoFromJSONTyped(json, false);
}

export function CurrencyInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': !exists(json, 'value') ? undefined : json['value'],
        'tokenValue': !exists(json, 'tokenValue') ? undefined : json['tokenValue'],
        'fiat': !exists(json, 'fiat') ? undefined : ((json['fiat'] as Array<any>).map(CurrencyInfoFromJSON)),
        'pretty': !exists(json, 'pretty') ? undefined : json['pretty'],
        'decimals': !exists(json, 'decimals') ? undefined : json['decimals'],
        'symbol': !exists(json, 'symbol') ? undefined : json['symbol'],
        'contractAddress': !exists(json, 'contractAddress') ? undefined : json['contractAddress'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function CurrencyInfoToJSON(value?: CurrencyInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'tokenValue': value.tokenValue,
        'fiat': value.fiat === undefined ? undefined : ((value.fiat as Array<any>).map(CurrencyInfoToJSON)),
        'pretty': value.pretty,
        'decimals': value.decimals,
        'symbol': value.symbol,
        'contractAddress': value.contractAddress,
        'name': value.name,
    };
}

